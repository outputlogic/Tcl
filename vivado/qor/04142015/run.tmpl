# Disable Light Timer
# set_param sta.sta4Timer false

# Verbose mode
# set_param place.hardVerbose 469538
# set_param place.oldMsgVerbose true
# set_param route.flowDbg 1

# Do not use new placer
# catch { set_param place.runNextGen 0  }

# Placer fix:
# set_param place.blockFFForLutRam true

proc snapit {experiment step directive} {
  if {[catch {
#     source /wrk/hdstaff/dpefour/bugcases/854161/dpefour/DROPDIR/reportCriticalPathInfo.tcl
#     package require snapshot
#     snapshot reset
    snapshot configure -db ROOTDIR/metrics.db -project cbu -version DROPDIR -experiment $experiment -step $step
    if {[catch {reportCriticalPathInfo DIRECTORY/reportCriticalPathInfo.setup.${step}.${directive}.csv setup} errorstring]} {
      puts " - E- reportCriticalPathInfo failed for setup: $errorstring"
    }
    if {[catch {reportCriticalPathInfo DIRECTORY/reportCriticalPathInfo.hold.${step}.${directive}.csv hold} errorstring]} {
      puts " - E- reportCriticalPathInfo failed for hold: $errorstring"
    }
    if {[file exists DIRECTORY/reportCriticalPathInfo.setup.${step}.${directive}.csv]} {
      catch { uplevel #0 exec /home/dpefour/bin/csv2tbl -csv DIRECTORY/reportCriticalPathInfo.setup.${step}.${directive}.csv -out DIRECTORY/reportCriticalPathInfo.setup.${step}.${directive}.rpt }
      catch { snapshot addfile reportCriticalPathInfo.setup.csv DIRECTORY/reportCriticalPathInfo.setup.${step}.${directive}.csv }
      catch { snapshot addfile reportCriticalPathInfo.setup.rpt DIRECTORY/reportCriticalPathInfo.setup.${step}.${directive}.rpt }
    }
    if {[file exists DIRECTORY/reportCriticalPathInfo.hold.${step}.${directive}.csv]} {
      catch { uplevel #0 exec /home/dpefour/bin/csv2tbl -csv DIRECTORY/reportCriticalPathInfo.hold.${step}.${directive}.csv -out DIRECTORY/reportCriticalPathInfo.hold.${step}.${directive}.rpt }
      catch { snapshot addfile reportCriticalPathInfo.hold.csv DIRECTORY/reportCriticalPathInfo.hold.${step}.${directive}.csv }
      catch { snapshot addfile reportCriticalPathInfo.hold.rpt DIRECTORY/reportCriticalPathInfo.hold.${step}.${directive}.rpt }
    }
    snapshot set directive $directive
    snapshot set rundir DIRECTORY
    snapshot extract -save
    snapshot reset
  } errorstring]} {
    puts "ERROR - $errorstring"
  }
}

catch {
#   source /wrk/hdstaff/dpefour/bugcases/854161/dpefour/reportCriticalPathInfo.tcl
  source /home/dpefour/git/scripts/3rd/reportCriticalPathInfo.tcl
  package require snapshot
  snapshot reset
}

# set dirname [file rootname [file rootname [lindex [file split DIRECTORY] end]]]
set dirname [join [lrange [file split DIRECTORY] end-1 end] .]

# set experiment {}
set experiment $dirname

set step 0

if {[catch {open_checkpoint CHECKPOINT}]} {
  # If open_checkpoint failed (NFS issue?), try a second time
  open_checkpoint CHECKPOINT
}

# delete_pblock [get_pblocks]
# read_xdc ROOTDIR/floorplan.xdc

report_timing_summary -no_detailed_paths -file DIRECTORY/postopt.rpt
snapit $experiment [incr step].opt_design {}

# set start [clock seconds]
# opt_design -directive Default
# set stop [clock seconds]
# write_checkpoint -force DIRECTORY/postopt.dcp
# # report_timing_summary -no_detailed_paths -file DIRECTORY/postopt.rpt
# report_timing_summary -file DIRECTORY/postopt.rpt
# snapshot set duration [::tb::snapshot::duration [expr $stop - $start]]
# snapit $experiment [incr step].opt_design Default

set start [clock seconds]
place_design -directive PLACE_DIRECTIVE
set stop [clock seconds]
write_checkpoint -force DIRECTORY/postplace.dcp
# report_timing_summary -no_detailed_paths -file DIRECTORY/postplace.rpt
report_timing_summary -file DIRECTORY/postplace.rpt
snapshot set duration [::tb::snapshot::duration [expr $stop - $start]]
snapit $experiment [incr step].place_design PLACE_DIRECTIVE

set start [clock seconds]
phys_opt_design -directive Explore
set stop [clock seconds]
# write_checkpoint -force DIRECTORY/postphysopt.dcp
report_timing_summary -no_detailed_paths -file DIRECTORY/postphysopt.rpt
snapshot set duration [::tb::snapshot::duration [expr $stop - $start]]
snapit $experiment [incr step].phys_opt_design Explore

############################
#### PhysOpt Iterations ####
############################
set wns [get_property SLACK [get_timing_paths]]
set tns $wns
set prevWns -1000
set prevTns -1000
set i 0
# Stop iterating if delta between previous WNS and current WNS is less than 10ps
# while {$wns < 0 && $prevWns < $wns && ([expr abs($prevWns - $wns)] > 0.01)} {}
while {($wns < 0 && $prevWns < $wns && ([expr abs($prevWns - $wns)] > 0.01))
       || ($tns < 0 && $prevTns < $tns && ([expr abs($prevTns - $tns)] > 0.01)) } {
  set prevWns $wns
  set prevTns $tns
  incr i
  puts "## phys_opt_design - iteration $i - SLACK: $wns - TNS: $tns ##"

  set start [clock seconds]
  phys_opt_design -directive AggressiveFanoutOpt
  set stop [clock seconds]
#   write_checkpoint -force DIRECTORY/postphysopt.AggressiveFanoutOpt_iter${i}.dcp
  report_timing_summary -no_detailed_paths -file DIRECTORY/postphysopt.AggressiveFanoutOpt_iter${i}.rpt
  snapshot set duration [::tb::snapshot::duration [expr $stop - $start]]
  snapit $experiment [incr step].phys_opt_design AggressiveFanoutOpt

  set prevWns $wns
  set prevTns $tns
  set wns [get_property SLACK [get_timing_paths]]
  set tns [format {%.2f} [expr 0.0 [join [get_property -quiet SLACK [get_timing_paths -quiet -slack_less_than 0.0 -setup -max_paths 33]] "+"]] ]

  set start [clock seconds]
  phys_opt_design -directive AggressiveExplore
  set stop [clock seconds]
#   write_checkpoint -force DIRECTORY/postphysopt.AggressiveExplore_iter${i}.dcp
  report_timing_summary -no_detailed_paths -file DIRECTORY/postphysopt.AggressiveExplore_iter${i}.rpt
  snapshot set duration [::tb::snapshot::duration [expr $stop - $start]]
  snapit $experiment [incr step].phys_opt_design AggressiveExplore

  set prevWns $wns
  set prevTns $tns
  set wns [get_property SLACK [get_timing_paths]]
  set tns [format {%.2f} [expr 0.0 [join [get_property -quiet SLACK [get_timing_paths -quiet -slack_less_than 0.0 -setup -max_paths 33]] "+"]] ]
}
############################

write_checkpoint -force DIRECTORY/postphysopt.dcp
# report_timing_summary -no_detailed_paths -file DIRECTORY/postphysopt.rpt
report_timing_summary -file DIRECTORY/postphysopt.rpt

set start [clock seconds]
# route_design -directive Explore -tns_cleanup
route_design -directive Explore
set stop [clock seconds]
write_checkpoint -force DIRECTORY/postroute.dcp
# report_timing_summary -no_detailed_paths -file DIRECTORY/postroute.rpt
report_timing_summary -file DIRECTORY/postroute.rpt
snapshot set duration [::tb::snapshot::duration [expr $stop - $start]]
snapit $experiment [incr step].route_design Explore

#################################
#### Post-Route Optimization ####
#################################
set wns [get_property SLACK [get_timing_paths]]
if {$wns < 0} {
  set start [clock seconds]
  phys_opt_design
  set stop [clock seconds]
#   write_checkpoint -force DIRECTORY/postrouteopt.dcp
  report_timing_summary -no_detailed_paths -file DIRECTORY/postrouteopt.rpt
  snapshot set duration [::tb::snapshot::duration [expr $stop - $start]]
  snapit $experiment [incr step].phys_opt_design Default
}
