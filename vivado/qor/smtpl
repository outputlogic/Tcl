#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" -- ${1+"$@"}

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2015 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Description:    Utility to manipulate Smart Templates
##
########################################################################################

########################################################################################
## 2015.10.17 - Added support for PHP post-processing
##            - Added -nophp/-nopp command line option
##            - Added -opp command line option
## 2015.04.16 - Initial release
########################################################################################

# #!/bin/sh
# # Run smtpl from the users PATH \
# exec smtpl -offset $LINENO -i "$0" ${1+"$@"} --<VAR>=<Default_Value> ... (e.g --ROOTDIR=`pwd`)

set WDIR [file dirname [file normalize [info script]]]

proc lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc getTemplateVars { str } {
  set res [lsort -unique [regexp -inline -all -- {\%\{[^\{\}\s\%]+\}} $str]]
  set matches [list]
  foreach el $res {
    if {[regexp {^\%\{(.+)\}$} $el - match]} {
      lappend matches $match
    }
  }
  return $matches
}

proc in { L elm } {
  foreach e $L {
    if {$elm == [lindex $e 0] } { return 1 }
  }
  return 0
}

proc main {args} {

  set verbose 0
  set debug 0
  set SCRIPT_VERSION {10-17-2015}

  set ifilename {}
  set ofilename {}
  # File to save template after variables replacement and before
  # PHP post-processing
  set oppfilename {}
  set mode {default} ; # default | string
  set action {replace} ; # replace | list | interactive
  set phpPostProcess 1
  set force 0
  # Number of lines to skip
  set offset 0
  catch {unset templateVar}
  catch {unset templateDefault}
  set error 0
  set show_help 0
  if {[llength $args] == 0} {
    incr show_help
  }
  #-------------------------------------------------------
  # Process command line arguments
  #-------------------------------------------------------
  while {[llength $args]} {
    set name [lshift args]
    switch -regexp -- $name {
      {^-i$} {
        set ifilename [lshift args]
      }
      {^-o$} {
        set ofilename [lshift args]
      }
      {^-opp$} {
        set oppfilename [lshift args]
      }
      {^-m$} -
      {^-mode$} -
      {^-m(o(de?)?)?$} {
          set mode [string tolower [lshift args]]
      }
      {^-S$} {
          set mode {string}
      }
      {^-offset$} {
          set offset [lshift args]
      }
      {^-f$} -
      {^-force$} -
      {^-f(o(r(ce?)?)?)?$} {
          set force 1
      }
      {^-l$} -
      {^-list$} -
      {^-l(i(st?)?)?$} {
          set action {list}
      }
      {^-I$} -
      {^-a$} -
      {^-ask$} -
      {^-a(sk?)?$} {
          set action {interactive}
      }
      {^-nopp$} -
      {^-nophp$} -
      {^-nopostprocessing$} {
          set phpPostProcess 0
      }
      {^-v$} -
      {^-verbose$} -
      {^-v(e(r(b(o(se?)?)?)?)?)?$} {
          set verbose 1
      }
      {^-d$} -
      {^-debug$} -
      {^-d(e(b(ug?)?)?)?$} {
          set debug 1
          set verbose 1
      }
      {^-h$} -
      {^-help$} -
      {^-h(e(lp?)?)?$} {
          incr show_help
      }
      default {
          if {[string match "--*" $name]} {
            if {[regexp {^\-\-(.+)=(.*)\s*$} $name - var value]} {
              set templateDefault($var) $value
            } else {
              puts " -E- option '$name' is not a valid option"
              incr error
            }
          } elseif {[string match "-*" $name]} {
            if {[regexp {^\-(.+)=(.*)\s*$} $name - var value]} {
              set templateVar($var) $value
            } else {
              puts " -E- option '$name' is not a valid option"
              incr error
            }
          } else {
            puts " -E- option '$name' is not a valid option"
            incr error
          }
      }
    }
  }

  if {$show_help} {
    # <-- HELP
    puts [format {
      Usage: smtpl
                  -i <filename>
                  [-o <filename>]
                  [-opp <filename>]
                  [-mode <default|string>][-S]
                  [-list|-l]
                  [-force|-f]
                  [-ask|-a|-I]
                  [-nopp]
                  [-verbose|-v]
                  [-help|-h]

      Description: Smart template utility

      Version: %s

        Use -list to list all the template variables.
        Use -I/-ask to run in interactive mode.
        Use -nopp to prevent PHP post-processing.
        Use -opp to specify a filename to save the template before PHP
        post-processing.

        By default, the template variables must be in the format %%{<VAR>}
        To replace any string in the template regardeless off the above
        format, use -S or -mode string

      Example:
         smtpl -i <filename> -o <filename> -DIR=/home/dpefour
         smtpl -i <filename> -o <filename> -I
         smtpl -i <filename> -o <filename> -DIR=/home/dpefour -nopp
    } $SCRIPT_VERSION ]
    # HELP -->

    return -code ok
  }

  if {$ifilename == {}} {
    puts " -E- no input filename specified (-i)"
    incr error
  } else {
    if {![file exists $ifilename]} {
      puts " -E- filename '$ifilename' does not exist"
      incr error
    }
  }

  if {$ofilename != {}} {
    if {[file exists $ofilename] && !$force} {
      puts " -E- filename '$ofilename' already exists"
      incr error
    } else {
      set dir [file normalize [file dirname $ofilename]]
      if {![file isdirectory $dir] && !$force} {
        puts " -E- directory '$dir' does not exist (-force)"
        incr error
      }
    }
  }

  if {$oppfilename != {}} {
    if {[file exists $oppfilename] && !$force} {
      puts " -E- filename '$oppfilename' already exists"
      incr error
    } else {
      set dir [file normalize [file dirname $oppfilename]]
      if {![file isdirectory $dir] && !$force} {
        puts " -E- directory '$dir' does not exist (-force)"
        incr error
      }
    }
  }

  switch $mode {
    "default" -
    "string" {
    }
    default {
      puts " -E- invalid mode '$mode'. Valid modes: default string"
      incr error
    }
  }

  if {$error} {
    puts "\n Some error(s) occured. Cannot continue.\n"
    exit -1
  }

  set FH [open $ifilename {r}]
  set content [read $FH]
  close $FH

  # Skip the first $offset lines of the script
  set content [join [lrange [split $content \n] $offset end] \n]

  if {$action == {interactive}} {
    set vars [getTemplateVars $content]
    foreach var $vars {
      if {[info exists templateVar($var)]} {
        puts stdout " -I- Skipping '$var'"
        continue
      }
      if {[info exists templateDefault($var)]} {
        puts -nonewline " \[$var\]\[$templateDefault($var)\] : "
        flush stdout
        gets stdin line
        if {[regexp {^$} $line]} {
          set line $templateDefault($var)
        }
      } else {
        puts -nonewline " \[$var\] : "
        flush stdout
        gets stdin line
        # Skip empty answers
        if {[regexp {^$} $line]} { continue }
      }
      set answer [string trim $line]
      set templateVar($var) $answer
    }
    set action {replace}
  }

  switch $action {
    replace {
      set vars [getTemplateVars $content]
      foreach var [lsort -unique [concat [array names templateDefault] [array names templateVar]]] {
        if {[info exists templateVar($var)]} {
          set value $templateVar($var)
        } else {
          set value $templateDefault($var)
        }
        if {[lsearch $vars $var] == -1} {
          puts stdout " -W- Invalid template variable '$var'"
        }
        if {$mode == {default}} {
          # %{var}
          set count [regsub -all -- [format {%%{%s}} $var] $content $value content]
        } else {
          # var
          set count [regsub -all -- [format {%s} $var] $content $value content]
        }
        if {!$count} {
          puts stdout " -W- No replacement for '$var'"
        } else {
          puts stdout " -I- '$var' : $count instance(s)"
        }
      }
      set matches [getTemplateVars $content]
      if {$matches != [list]} {
        puts stdout " -W- Some template variable(s) have not been substituted: $matches"
      }

      # Save the template before it gets post-process by PHP
      if {$oppfilename != {}} {
        set dir [file normalize [file dirname $oppfilename]]
        if {![file isdirectory $dir]} {
          puts " -I- Creating directory $dir"
          file mkdir $dir
        }
        set FH [open $oppfilename {w}]
        puts $FH $content
        close $FH
        exec chmod --reference $ifilename $oppfilename
        puts " -I- File [file normalize $oppfilename] created"
      } else {
        puts $content
      }

      if {$phpPostProcess} {
        if {[catch {
          set res [exec php -n [format {<<%s} $content] ]
          # Replace the content by the PHP stdout
          set content $res
        } errorstring]} {
          puts " -W- PHP post-processing failed: $errorstring"
        }
      }

      if {$ofilename != {}} {
        set dir [file normalize [file dirname $ofilename]]
        if {![file isdirectory $dir]} {
          puts " -I- Creating directory $dir"
          file mkdir $dir
        }
        set FH [open $ofilename {w}]
        puts $FH $content
        close $FH
        exec chmod --reference $ifilename $ofilename
        puts " -I- File [file normalize $ofilename] created"
      } else {
        puts $content
      }

    }
    list {
      puts " -I- Template: [file normalize $ifilename]"
      set matches [getTemplateVars $content]
      puts " -I- List of template variables:"
      foreach el $matches {
        puts "       $el"
      }
      puts " -I- Use -<var>=<value> to replace variables inside the template"
    }
  }

  return -code ok
}

# Remove first '--' due to magic exec: exec tclsh "$0" -- ${1+"$@"}
::lshift ::argv

eval [concat main $argv]

exit 0
