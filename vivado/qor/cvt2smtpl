#!/bin/sh
# use -*-Tcl-*- \
exec tclsh "$0" -- ${1+"$@"}

# Convert a file to a template:
#    cvs2smtpl -i <input file> -o <output file> [-<string>=<value>] [-<string>=<value>] ...
# Example: cvt2smtpl -i myfile -o mytemplate  -macro=macro -lib=lef -Block15=Block -hold_repair_qp_eco=suffix
# Replace string '<string>' from the input file by '!{<value>}' inside the template


proc lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc main {args} {

  set verbose 0
  set debug 0
  set SCRIPT_VERSION {04-14-2015}

  set ifilename {}
  set ofilename {}
  set mode {strict} ; # strict | loose
  set strings [list]
  set cmdLine $args
  set force 0
  set error 0
  set show_help 0
  if {[llength $args] == 0} {
    incr show_help
  }
  #-------------------------------------------------------
  # Process command line arguments
  #-------------------------------------------------------
  while {[llength $args]} {
    set name [lshift args]
    switch -regexp -- $name {
      {^-i$} {
        set ifilename [lshift args]
      }
      {^-o$} {
        set ofilename [lshift args]
      }
      {^-l$} -
      {^-loose$} -
      {^-l(o(o(se?)?)?)?$} {
          set mode {loose}
      }
      {^-s$} -
      {^-strict$} -
      {^-s(t(r(i(ct?)?)?)?)?$} {
          set mode {strict}
      }
      {^-f$} -
      {^-force$} -
      {^-f(o(r(ce?)?)?)?$} {
          set force 1
      }
      {^-v$} -
      {^-verbose$} -
      {^-v(e(r(b(o(se?)?)?)?)?)?$} {
          set verbose 1
      }
      {^-d$} -
      {^-debug$} -
      {^-d(e(b(ug?)?)?)?$} {
          set debug 1
          set verbose 1
      }
      {^-h$} -
      {^-help$} -
      {^-h(e(lp?)?)?$} {
          incr show_help
      }
      default {
          if {[string match "-*" $name]} {
#             puts " -E- option '$name' is not a valid option"
#             incr error
            if {[regexp {^\-(.+)=(.*)\s*$} $name - string var]} {
              lappend strings [list $var $string]
# puts "<$var>=<$value>"
            } else {
              puts " -E- option '$name' is not a valid option"
              incr error
            }
          } else {
            puts " -E- option '$name' is not a valid option"
            incr error
          }
      }
    }
  }

  if {$show_help} {
    # <-- HELP
    puts [format {
      Usage: cvt2smtpl
                  -i <filename>
                  [-o <filename>]
                  [-strict|-s][-loose|-l]
                  [-force|-f]
                  [-verbose|-v]
                  [-help|-h]

      Description: Convert file to a template

      Version: %s

        xxx

      Example:
         cvt2smtpl -i <filename> -o <filename> -/home/dpefour=dir
    } $SCRIPT_VERSION ]
    # HELP -->

    return -code ok
  }

  if {$ifilename == {}} {
    puts " -E- no input filename specified (-i)"
    incr error
  } else {
    if {![file exists $ifilename]} {
      puts " -E- filename '$ifilename' does not exist"
      incr error
    }
  }

  if {$ofilename != {}} {
    if {[file exists $ofilename] && !$force} {
      puts " -E- filename '$ofilename' already exists"
      incr error
    } else {
      set dir [file normalize [file dirname $ofilename]]
      if {![file isdirectory $dir] && !$force} {
        puts " -E- directory '$dir' does not exist (-force)"
        incr error
      }
    }
  }

  if {$error} {
    puts "\n Some error(s) occured. Cannot continue.\n"
    exit -1
  }

  set FH [open $ifilename {r}]
  set content [read $FH]
  close $FH

#   # replace the '\' character at the end of the line by '\\'
#   set newcontent [list]
#   foreach line [split $content "\n"] {
#     regsub -all {\\$} $line {\\\\} line
#     lappend newcontent $line
#   }
#   set content [join $newcontent "\n"]

  foreach s $strings {
    foreach {var string} $s { break }
    if {$mode == {strict}} {
      # %{var}
      set count [regsub -all -- [format {%s} $string] $content [format {%%{%s}} $var] content]
    } else {
      # var
      set count [regsub -all -- [format {%s} $string] $content $var content]
    }
    if {!$count} {
      puts " -W- No replacement for '$var'"
    } else {
      puts " -I- '$string' : $count instance(s)"
    }
  }

  if {$ofilename != {}} {
    set dir [file normalize [file dirname $ofilename]]
    if {![file isdirectory $dir]} {
      puts " -I- Creating directory $dir"
      file mkdir $dir
    }
    set FH [open $ofilename {w}]

#     puts $FH [format {#!/bin/sh
# # Run the smtpl from the users PATH %s
# exec smtpl -i "$0" ${1+"$@"}
#
# # Template generated on %s from file %s
# # Command line: %s
# } "\\" [exec date] [file normalize $ifilename] $cmdLine ]

    puts $FH $content
    close $FH
    puts " -I- File [file normalize $ofilename] created"
  } else {
    puts $content
  }

  return -code ok
}

# Remove first '--' due to magic exec: exec tclsh "$0" -- ${1+"$@"}
::lshift ::argv

eval [concat main $argv]

exit 0
