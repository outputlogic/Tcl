#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2015 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Description:    Convert text report from Vivado report_cdc to CSV file
##
########################################################################################

# TODO: 
#  - Code can be overly improved and the parse_report_cdc should return results by reference

########################################################################################
## 2015.03.25 - Initial release
########################################################################################

if {[catch {package require prettyTable}]} {
  lappend auto_path {/home/dpefour/git/scripts/toolbox}
  package require prettyTable
}

namespace eval ::tb {}

namespace eval ::tb::report_cdc_to_csv {
  namespace export report_cdc_to_csv
}

proc ::tb::report_cdc_to_csv::report_cdc_to_csv {args} {
  
  set reportfilename {}
  set csvfilename {}
  set merge 0
  set quiet 0
  set error 0
  set help 0
  if {[llength $args] == 0} {
    set help 1
  }
  while {[llength $args]} {
    set name [lshift args]
    switch -exact -- $name {
      -r -
      -report {
        set reportfilename [lshift args]
      }
      -c -
      -csv {
        set csvfilename [lshift args]
      }
      -m -
      -merge {
        set merge 1
      }
      -q -
      -quiet {
        set quiet 1
      }
      -h -
      -help {
           set help 1
      }
      default {
            if {[string match "-*" $name]} {
              puts " -E- option '$name' is not a valid option."
              incr error
            } else {
              puts " -E- option '$name' is not a valid option."
              incr error
            }
      }
    }
  }

  if {$help} {
    puts [format {
  Usage: report_cdc_to_csv
              -report <filename>
              [-csv <filename>]
              [-merge]
              [-quiet]
              [-help|-h]

  Description: Convert a report from report_cdc into a CSV file
  
    Use -merge to merge all the detailed tables in a single table.

  Example:
     report_cdc_to_csv -report report_cdc.rpt -csv report_cdc.csv
     report_cdc_to_csv -report report_cdc.rpt -csv report_cdc.csv -quiet -merge
} ]
    # HELP -->
    return -code ok
  }
  
  if {![file exists $reportfilename]} {
    puts " -E- File '$reportfilename' does not exist"
    incr error
  }

  if {$error} {
    error " -E- some error(s) happened. Cannot continue"
  }

  if {$csvfilename != {}} {
    set FH [open $csvfilename {w}]
    puts $FH "# File generated on [clock format [clock seconds]]"
    puts $FH "# CDC Report: [file normalize $reportfilename]"
    puts $FH ""
    close $FH
  }

  # Convert the text report into a Tcl list of elements. Each list
  # element is a single CDC table.
  set FH [open $reportfilename {r}]
  set report_cdc [read $FH]
  close $FH
  array set cdcTables [parse_report_cdc $report_cdc $merge]
  
  set tbl [::tb::prettyTable]
  set count 0
  foreach key [array names cdcTables] {
    
    switch $key {
      summary {
        set table $cdcTables($key)
      }
      default {
        # 'key' Format: <sourceClock>:<destinationClock>
        foreach {cdcType table} $cdcTables($key) { break }
        foreach {sourceClock destinationClock} [split $key : ] { break }
      }
    }
    
    $tbl header [lindex $table 0]
    foreach row [lrange $table 1 end] {
      $tbl addrow $row
    }
    
    if {!$quiet} {
      $tbl configure -indent 2
      switch $key {
        summary {
          puts " -I- Summary:"
        }
        default {
          puts " -I- CDC: $sourceClock -> $destinationClock"
          puts " -I- CDC Type: $cdcType"
        }
      }
      puts [$tbl print]
    }
    
    if {$csvfilename != {}} {
      set FH [open $csvfilename {a}]
      switch $key {
        summary {
          puts $FH "#####################################"
          puts $FH "# Summary table"
          puts $FH "#####################################"
        }
        default {
          puts $FH "#####################################"
          puts $FH "# CDC table: $sourceClock -> $destinationClock"
          puts $FH "# CDC Type: $cdcType"
          puts $FH "#####################################"
        }
      }
      close $FH
      $tbl export -format csv -file $csvfilename -append
    }
    
    # Empty table
    catch {$tbl reset}

    incr count
  }
 
  if {$csvfilename != {}} {
    puts " -I- CSV file [file normalize $csvfilename] generated"
    puts " -I- $count tables exported"
  }

  # Delete table
  catch {$tbl destroy}

  return -code ok
}

proc ::tb::report_cdc_to_csv::lshift {inputlist} {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc ::tb::report_cdc_to_csv::extract_columns { str match } {
  set col 0
  set columns [list]
  set previous -1
  while {[set col [string first $match $str [expr $previous +1]]] != -1} {
    if {[expr $col - $previous] > 1} {
      lappend columns $col
    }
    set previous $col
  }
  return $columns
}

proc ::tb::report_cdc_to_csv::extract_row {str columns} {
  lappend columns [string length $str]
  set row [list]
  set pos 0
  foreach col $columns {
    set value [string trim [string range $str $pos $col]]
    lappend row $value
    set pos [incr col 2]
  }
  return $row
}

# merge = 1 : merge all the detailed tables into a single table
proc ::tb::report_cdc_to_csv::parse_report_cdc {report {merge 0}} {
  set columns [list]
  catch {unset tables}
  set table [list]
  set report [split $report \n]
  set sourceClock {}
  set destinationClock {}
  set cdcType {}
  set SM {header}
  for {set index 0} {$index < [llength $report]} {incr index} {
    set line [lindex $report $index]
    switch $SM {
      header {
        # E.g: Source Clock: wbClk
        if {[regexp -nocase {^Source Clock:\s*([^\s].*)\s*$} $line - sourceClock]} {
        }
        # E.g: Destination Clock: bftClk
        if {[regexp -nocase {^Destination Clock:\s*([^\s].*)\s*$} $line - destinationClock]} {
        }
        # E.g: CDC Type: No Common Primary Clock
        if {[regexp -nocase {^CDC Type:\s*([^\s].*)\s*$} $line - cdcType]} {
        }
        if {[regexp {^\-+\s+\-+\s+\-+\s+\-+\s*$} $line]} {
          # Match table header for summary table
          #   ID  Count  Description  Detail
          #   --  -----  -----------  ------
          set columns [extract_columns [string trimright $line] { }]
          set header [extract_row [lindex $report [expr $index -1]] $columns]
          set row [list]
          foreach h $header {
            lappend row [string trim [format {%s} $h]]
          }
          lappend table $row
          set SM {table}
        } elseif {[regexp {^\-+\s+\-+\s+\-+\s+\-+\s*\-+} $line]} {
          # Match table header for detailed tables
          #   Row  ID  Severity  Description  Depth  Exception  Source (From)  Destination (To)
          #   ---  --  --------  -----------  -----  ---------  -------------  ----------------
          set columns [extract_columns [string trimright $line] { }]
          set header [extract_row [lindex $report [expr $index -1]] $columns]
          set row [list]
          if {$merge} {
            set row [list {CDC Type} {Source Clock} {Destination Clock}]
          }
          foreach h $header {
            lappend row [string trim [format {%s} $h]]
          }
          if {$table == {}} {
            # Only set the header if the table is empty
            lappend table $row
          }
          set SM {table}
        }
      }
      table {
        # Check for empty line or for line that match '<empty>'
        if {(![regexp {^\s*$} $line]) && (![regexp -nocase {^\s*No clocks found.\s*$} $line])} {
          set row [extract_row $line $columns]
          if {($sourceClock != {}) || ($destinationClock != {})} {
            if {$merge} {
              set row [linsert $row 0 $cdcType $sourceClock $destinationClock]
            }
          }
          lappend table $row
          set SM {table}
        } else {
          if {($sourceClock == {}) && ($destinationClock == {})} {
            set tables(summary) $table
            set table [list]
          } else {
            if {$merge == 0} {
              # Only save the current table if not running in merge mode
              set tables(${sourceClock}:${destinationClock}) [list $cdcType $table]
              set table [list]
            } else {
            }
          }
          set sourceClock {}
          set destinationClock {}
          set cdcType {}
          set SM {header}
        }
      }
      end {
      }
    }
  }
  if {$merge && ($table != {})} {
    # Save the table in merge mode
    set tables(*:*) [list {N/A} $table]
  }
  return [array get tables]
}

namespace eval ::tb {
  namespace import ::tb::report_cdc_to_csv::report_cdc_to_csv
}

##-----------------------------------------------------------------------
## Main
##-----------------------------------------------------------------------

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced
} else {
  if {[catch {eval [concat ::tb::report_cdc_to_csv::report_cdc_to_csv $argv]} errorstring]} {
    puts $errorstring
    exit 1
  }
  exit 0
}
