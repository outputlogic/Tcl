#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" ${1+"$@"}

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2016 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Version:        2016.08.10
## Description:    This script removed timestamp and other info (cpu, ...) from Vivado
##                 log files so that log files can be more easily compared
##
########################################################################################

# Usage:
# linux% vivadoLog vivado.log > vivado.tmp

########################################################################################
## 2016.08.10 - Added few patterns for memory removal
##            - Added misc other patterns
## 12.08.2014 - Added few patterns for memory removal
## 07.31.2014 - Added help message
## 07.11.2014 - Initial release
########################################################################################

proc remove_comments { input } {
  # Removes all comments
  set output $input
  set output [ regsub -all -line {;\s*#.*} $output {} ]
  set output [ regsub -all -line {^\s*#.*} $output {} ]
  return $output
}

proc remove_whitespace { input } {
  # Removes all whitespace
  set output $input
  set output [ regsub -all {\s+} $output {} ]
  return $output
}

proc remove_special { input } {
  # Removes all special characters, except '-', '_', and whitespace
  set output $input
  set output [ regsub -all {[^\sa-zA-Z0-9_-]+} $output { } ]
  return $output
}

proc remove_datestamps { input { replace_with {<timestamp>} } } {
  # Removes all date stamps
  set output $input
  # Matches:  Mon Jun 16 10:02:33 MDT 2014 or Mon Jun 1 1:02:33 2014
  set output [ regsub -all {[a-zA-Z]{3}\s+[a-zA-Z]{3}\s+[0-9]{1,2}\s+[0-9]{1,2}:[0-9]{2}:[0-9]{2}\s+([A-Z]{3}\s+){0,1}[0-9]{4}} $output $replace_with ]
  # Matches:  Mon Jun 1 1:02:33 2014
  #set output [ regsub -all {[a-zA-Z]{3} [a-zA-Z]{3} [0-9]{1,2} [0-9]{1,2}:[0-9]{2}:[0-9]{2} [0-9]{4}} $output $replace_with ]
  # Matches ISO 8601:  2014-01-04T07:00:23+0400
  set output [ regsub -all {([0-9]{4}\-[0-9]{2}-[0-9]{2}([tT][0-9:\.]*)?)([zZ]|([+\-])([0-9]{2}):?([0-9]{2}))} $output $replace_with ]
  return $output
}

proc remove_cpu { input { replace_with {<cpu>} } } {
  # Removes all cpu time
  set output $input
  # Matches:  cpu = 00:00:01
  set output [ regsub -all {(cpu\s*=\s*)([0-9]{2}\:[0-9]{2}\:[0-9]{2})(\s|$|;)} $output "\\1$replace_with\\3" ]
  # Matches:  cpu = 00:00:00.79
  set output [ regsub -all {(cpu\s*=\s*)([0-9]{2}\:[0-9]{2}\:[0-9]{2}\.[0-9]+)(\s|$|;)} $output "\\1$replace_with\\3" ]
  # Matches:  CPU:   10.9 | HCPU:   10.9 | TclCPU:  902.1 | PACPU: 1870.1
  set output [ regsub -all {(CPU\s*:\s)(\s*[0-9]+\.[0-9]+)(\s|$|;|\|)} $output "\\1$replace_with\\3" ]
  # Matches:  MT: cpu time 2.15, wall time 2.15
  set output [ regsub -all {(cpu time\s*)([0-9]+\.[0-9]+)(\s|\,|$)} $output "\\1$replace_with\\3" ]
  return $output
}

proc remove_elapsed { input { replace_with {<elapsed>} } } {
  # Removes all elapsed time
  set output $input
  # Matches:  elapsed = 00:00:01
  set output [ regsub -all {(elapsed\s*=\s*)([0-9]{2}\:[0-9]{2}\:[0-9]{2})(\s|$|;)} $output "\\1$replace_with\\3" ]
  # Matches:  elapsed = 00:00:00.79
  set output [ regsub -all {(elapsed\s*=\s*)([0-9]{2}\:[0-9]{2}\:[0-9]{2}\.[0-9]+)(\s|$|;)} $output "\\1$replace_with\\3" ]
  return $output
}

proc remove_gain { input { replace_with {<gain>} } } {
  # Removes all gain
  set output $input
  # Matches:  gain = 75.000
  # Matches:  gain = -75.000
  set output [ regsub -all {(gain\s*=\s*)(-?[0-9]+\.[0-9]+)(\s|$|;)} $output "\\1$replace_with\\3" ]
  return $output
}

proc remove_peak { input { replace_with {<peak>} } } {
  # Removes all peak
  set output $input
  # Matches:  peak = 4239.188
  set output [ regsub -all {(peak\s*=\s*)([0-9]+\.[0-9]+)(\s|$|;)} $output "\\1$replace_with\\3" ]
  return $output
}

proc remove_mem { input { replace_with {<mem>} } } {
  # Removes all mem
  set output $input
  # Matches:  Mem:    0.0 MB | TMem: 6110.8 MB
  set output [ regsub -all {(Mem\s*:\s)(\s*[0-9]+\.[0-9]+)(\s|$|;|\|)} $output "\\1$replace_with\\3" ]
  # Matches:  Memory: 0.016235 MB
  # Matches:  Memory: -0.016235 MB
  set output [ regsub -all {(Memory\s*:\s)(\-?\s*[0-9]+\.[0-9]+)(\s|$|;|\|)} $output "\\1$replace_with\\3" ]
  # Matches:  free physical = 75584 ; free virtual = 110085
  set output [ regsub -all {free\s+(physical\s*=\s)(\s*[0-9]+)(\s|$|;|\|)} $output "\\1$replace_with\\3" ]
  set output [ regsub -all {free\s+(virtual\s*=\s)(\s*[0-9]+)(\s|$|;|\|)} $output "\\1$replace_with\\3" ]
  # Matches: heap: 0bytes, malloc: 92.1511MB, virtual: 0bytes
  # Matches: heap: 0bytes, malloc: 92.1511kB, virtual: 0bytes
  set output [ regsub -all {((heap|malloc|virtual)\s*:\s*)([0-9]+(\.[0-9]+)?)(\s*(bytes|MB|kB|GB))} $output "\\1$replace_with\\5" ]
  # Matches: Memory Report: used = 1023.55 heap = 1351.01
  set output [ regsub -all {((heap|used)\s*=\s*)([0-9]+(\.[0-9]+)?)(\s|$)} $output "\\1$replace_with\\5" ]

  return $output
}

proc remove_wall { input { replace_with {<wall>} } } {
  # Removes all mem
  set output $input
  # Matches:  Wall:   10.9 | TclWall:  556.7 | PAWall: 1147.2
  # Matches: Add Constraints | CPU: <cpu> | WALL: 23.31 | Mem: <mem> | Called  1 times
  set output [ regsub -all {((Wall|WALL)\s*:\s)(\s*[0-9]+\.[0-9]+)(\s|$|;|\|)} $output "\\1$replace_with\\4" ]
  # Matches:  MT: cpu time 2.15, wall time 2.15
  set output [ regsub -all {(wall time\s*)([0-9]+\.[0-9]+)(\s|\,|$)} $output "\\1$replace_with\\3" ]
  return $output
}

proc remove_checksum { input { replace_with {<checksum>} } } {
  # Removes all mem
  set output $input
  # Matches: Checksum: 2efc09192
  # Matches: Checksum: 2efc0919
  set output [ regsub -all {((c|C)hecksum\s*:\s*)([0-9a-z]{8,9})} $output "\\1$replace_with" ]
  # Matches: ----- Checksum: PlaceDB: 98b4c2f0 PlaceInfo: d8c21771 ConstDB: c8a55756 ShapeSum: b5a45fdb Netlist: 7f663eaf RouteDB: 40437ab7
  # Matches: ----- Checksum: NetGraph: 5bd3b916 NumContArr: db9dd73d Constraints: 00000000
  set output [ regsub -all {((NetGraph|NumContArr|Constraints|PlaceDB|PlaceInfo|ConstDB|ShapeSum|Netlist|RouteDB)\s*:\s*)([0-9a-z]{8,9})} $output "\\1$replace_with" ]
  # Matches: Infrastructure netlist checksum at beginning of placer: 1f8a76b9
  # Matches: Infrastructure netlist checksum after mandatory logic opt: 1f8a76b9
  set output [ regsub -all {(Infrastructure netlist checksum.+\s*:\s*)([0-9a-z]{8,9})} $output "\\1$replace_with" ]
  return $output
}

proc remove_others { input { replace_with {<DEL>} } } {
  set output $input
  # Matches:  completed in 2 CPU seconds
  set output [ regsub -all {(completed\s+in\s+)([0-9]+)(\s+CPU\s+seconds)} $output "\\1$replace_with\\3" ]
  # Matches:  stats:   0.0/ 88.7e   0.0/179.8u   0.1/2734.6MB initDevFiles
  set output [ regsub -all {(stats\s*:\s*)([0-9]+\.[0-9]+\s*/\s*[0-9]+\.[0-9]+e\s*[0-9]+\.[0-9]+\s*/\s*[0-9]+\.[0-9]+u\s*[0-9]+\.[0-9]+\s*/\s*[0-9]+\.[0-9]+)(\s*MB)} $output "\\1$replace_with\\3" ]
  # Matches:  Budgeting needed 19.15u 0s 19.16w
  set output [ regsub -all {(Budgeting needed\s*)([0-9]+(\.[0-9]+)?u\s*[0-9]+(\.[0-9]+)?s\s*[0-9]+(\.[0-9]+)?w)} $output "\\1$replace_with" ]
  # Matches: Dump utilization runtime 0.01u 0s 0w
  # Matches: ILR3 runtime 42.67u 0.84s 11.44w
  set output [ regsub -all {(runtime\s*)([0-9]+(\.[0-9]+)?u\s*[0-9]+(\.[0-9]+)?s\s*[0-9]+(\.[0-9]+)?w)} $output "\\1$replace_with" ]
  # Matches: build congestion map time: 3.52u 0s 0.46w
  set output [ regsub -all {(map time\s*:\s*)([0-9]+(\.[0-9]+)?u\s*[0-9]+(\.[0-9]+)?s\s*[0-9]+(\.[0-9]+)?w)} $output "\\1$replace_with" ]
  # Finished LUT pin assigner in: 3.4u 0s 0.43w
  # Time for Update Timing = 83.04u 3.3s 21.75w
  set output [ regsub -all {(\s*)([0-9]+(\.[0-9]+)?u\s*[0-9]+(\.[0-9]+)?s\s*[0-9]+(\.[0-9]+)?w)} $output "\\1$replace_with" ]
  # Matches:  Heap at beginning of placer (excluding java VM) (MB): 4503.99
  set output [ regsub -all {(\(MB\)\s*:\s*)([0-9]+\.[0-9]+)(\s|$)} $output "\\1$replace_with\\3" ]
  # Matches:  Creating SRL shapes needed 7.47 secs
  # Matches:    solving flow...               0.0 secs
#   set output [ regsub -all {(needed\s*)([0-9]+\.[0-9]+)(\s*secs)} $output "\\1$replace_with\\3" ]
  set output [ regsub -all {(\s)([0-9]+\.[0-9]+)(\s*secs)} $output "\\1$replace_with\\3" ]
  # Matches:  After creating staObj: 0.00830841MB
  # Matches:  After building Cache tables: 63.6732MB
  # Matches:  After process config changes: -189.273MB
  set output [ regsub -all {((staObj|tables|changes)\s*:\s*)(\-?[0-9]+\.[0-9]+)(\s*MB)} $output "\\1$replace_with\\4" ]
  # Matches:  ... | CPU:  23.16 | WALL: 23.31 | Mem:      0.0 | Called  1 times
  set output [ regsub -all {(Called\s*)([0-9]+)(\s*times)} $output "\\1$replace_with\\3" ]
  # Matches: termId 1273162 drvTermId 1273161 blockId 283277 drvBlockId 283245
  set output [ regsub -all {((termId|drvTermId|blockId|drvBlockId)\s*)([0-9]+)(\s*)} $output "\\1$replace_with\\4" ]
  # Matches: ((0, 30000), (6899, 45000))
  set output [ regsub -all {\(\s*[0-9]+\s*,\s*[0-9]+\)} $output "($replace_with , $replace_with)" ]
  # Matches:  IC: 2.150E+04
  # Matches:  IC = 2.150E+04
  set output [ regsub -all {(\sIC\s*:\s*)([0-9]+[^\s]*)(\s|\,|$)} $output "\\1$replace_with\\3" ]
  set output [ regsub -all {(\sIC\s*=\s*)([0-9]+[^\s]*)(\s|\,|$)} $output "\\1$replace_with\\3" ]
  # Matches:  CMR: 0.003
  # Matches:  CMR = 0.003
  set output [ regsub -all {(\sCMR\s*:\s*)([0-9]+[^\s]*)(\s|\,|$)} $output "\\1$replace_with\\3" ]
  set output [ regsub -all {(\sCMR\s*=\s*)([0-9]+[^\s]*)(\s|\,|$)} $output "\\1$replace_with\\3" ]
  return $output
}

if {[llength $argv] == 0} {
    puts [format {
  Usage: vivadoLog <vivado_log_file> > <output_file>

  Description:

     This command removes some information from Vivado log file such as timestamp,
     cpu time, wall time, mem, ...

  Example:
     vivadoLog vivado.log > vivado.tmp
} ]
    # HELP -->
  exit 0
}

set vivadolog [lindex $argv 0]

set FH [open $vivadolog r]

while {![eof $FH]} {
  gets $FH line
#   set line [remove_comments $line]
#   set line [remove_whitespace $line]
#   set line [remove_special $line]
  set line [remove_datestamps $line]
  set line [remove_checksum $line]
  set line [remove_cpu $line]
  set line [remove_elapsed $line]
  set line [remove_gain $line]
  set line [remove_peak $line]
  set line [remove_mem $line]
  set line [remove_wall $line]
  set line [remove_others $line]
  puts $line
}

close $FH

exit 0

}


