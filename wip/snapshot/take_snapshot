#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

########################################################################################
## 2015.12.17 - Added support for -rci/-ru
## 2015.12.15 - Minor fix to enable on-file timing reports to be used with a DCP
## 2015.12.14 - Added support for -nodcp/-rts/-rda/-rrs
## 2015.11.16 - Initial tracked release
########################################################################################

proc print_help {} {

set help_message [format {
#########################################################################
#########################################################################
##
## take_snapshot
##
## Example:
##    take_snapshot -step place_design
##
## Description:
##   Use take_snapshot to capture a snapshot.
##   
## Options:
##   
##   --project                Project name
##
##   --remove-def             Remove the DEF file(s)
##   
##
##   Other command line arguments:
##
##   --log-dir                Location to save the script log file as well as the
##                            compressor log file.
##                            Default: .
##
##   --db-dir                 Location of the master database.
##
#########################################################################
#########################################################################
} ]

  foreach line [split $help_message "\n"] {
    regsub {##} $line {  } line
    print stdout $line
  }

}

catch {unset data}

#########################################################################
#########################################################################
##
## Various support functions
##
#########################################################################
#########################################################################

##-----------------------------------------------------------------------
## pop
## push
## lshift
##-----------------------------------------------------------------------
## Various stack processing functions.
##-----------------------------------------------------------------------

interp alias {} push {} lappend  

proc pop { name } {
  upvar 1 $name stack
  set res [lindex $stack end]
  set stack [lrange $stack 0 end-1]
  set res
}

proc lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

##-----------------------------------------------------------------------
## backup_file
##-----------------------------------------------------------------------
## Backup a file by renaming the file to <filename>.<index>.<extension>.
## The function searchs for the first available <index> number.
##-----------------------------------------------------------------------

proc backup_file { filename } {

  if {![file exists $filename]} {
    print info "File '$filename' does not exist"
    return 0
  }
  
  set rootname [file rootname $filename]
  set extension [file extension $filename]
  
  set index 1
  
  while {1} {
    if {![file exists ${rootname}.${index}${extension}]} {
      break
    }
    incr index
  }

  print info "Backing up log file $filename to ${rootname}.${index}${extension}"
  set exitCode [file rename -force -- $filename ${rootname}.${index}${extension}]
  
  return $exitCode
}

##-----------------------------------------------------------------------
## print
##-----------------------------------------------------------------------
## Print message to stdout.
## Example:
##      print stdout "..."
##      print error "..."
##-----------------------------------------------------------------------

proc print { type message {nonewline ""} } {
  global data
  set callerName [lindex [info level [expr [info level] -1]] 0]
  set type [string tolower $type]
  set msg ""
  switch -exact $type {
    "stdout" {
      set msg $message
    }
    "fatal" {
      set msg "  FATAL ERROR: $message"
    }
    "error" {
      set msg "  ERROR: $message"
    }
    "warning" {
      set msg "  WARNING: $message"
    }
    "info" {
      set msg "  INFO: $message"
    }
    "log" {
      set msg "  LOG: $message"
      #-------------------------------------------------------
      # Log message.
      #-------------------------------------------------------
      if {$data(log_fh) != {}} {
        if {$nonewline != ""} {
          puts -nonewline $data(log_fh) $msg
        } else {
          puts $data(log_fh) $msg
        }
        flush $data(log_fh)
      }
      #-------------------------------------------------------
      # Exit.
      #-------------------------------------------------------
      return 0
    }
   default {}
  }
  #-------------------------------------------------------
  # Print message.
  #-------------------------------------------------------
  if {$nonewline != ""} {
    puts -nonewline stdout $msg
  } else {
    puts stdout $msg
  }
  flush stdout
  #-------------------------------------------------------
  # Log message.
  #-------------------------------------------------------
  if {$data(log_fh) != {}} {
    if {$nonewline != ""} {
      puts -nonewline $data(log_fh) $msg
    } else {
      puts $data(log_fh) $msg
    }
    flush $data(log_fh)
  }
  #-------------------------------------------------------
  # Exit.
  #-------------------------------------------------------
  return 0
}

##-----------------------------------------------------------------------
## duration
##-----------------------------------------------------------------------
## Convert a number of seconds in a human readable string.
## Example:
##      set startTime [clock seconds]
##      ...
##      set endTime [clock seconds]
##      puts "The runtime is: [duration [expr $endTime - startTime]]"
##-----------------------------------------------------------------------

proc duration { int_time } {
   set timeList [list]
   if {$int_time == 0} { return "0 sec" }
   foreach div {86400 3600 60 1} mod {0 24 60 60} name {day hr min sec} {
     set n [expr {$int_time / $div}]
     if {$mod > 0} {set n [expr {$n % $mod}]}
     if {$n > 1} {
       lappend timeList "$n ${name}s"
     } elseif {$n == 1} {
       lappend timeList "$n $name"
     }
   }
   return [join $timeList]
}

##-----------------------------------------------------------------------
## execpipe
##-----------------------------------------------------------------------
## Execute a process under UNIX.
##-----------------------------------------------------------------------

proc system {COMMAND} {

 if { [catch {open "| $COMMAND 2>@stdout"} FILEHANDLE] } {

   return "Can't open pipe for '$COMMAND'"

 }

 set PIPE $FILEHANDLE
 fconfigure $PIPE -buffering none

 set OUTPUT ""

 while { [gets $PIPE DATA] >= 0 } {
   puts $DATA
   append OUTPUT $DATA "\n"
 }

 if { [catch {close $PIPE} ERRORMSG] } {

   if { [string compare "$ERRORMSG" "child process exited abnormally"] == 0 } {

     # this error means there was nothing on stderr (which makes sense) and
     # there was a non-zero exit code - this is OK as we intentionally send
     # stderr to stdout, so we just do nothing here (and return the output)

   } else {

     return "Error '$ERRORMSG' on closing pipe for '$COMMAND'"

   }

 }

 regsub -all -- "\n$" $OUTPUT "" STRIPPED_STRING
 return "$STRIPPED_STRING"

}
 
#########################################################################
#########################################################################
##
## Main
##
#########################################################################
#########################################################################

catch {unset data}
set data(log_dir) {./log}
set data(log_filename) {take_snapshot.log}
set data(log_fh) {}

#-------------------------------------------------------
# Process command line arguments for take_snapshot
#-------------------------------------------------------

foreach el {db project release version experiment step run description log time timeout} { set $el {} }
set checkpoint {}
# set db [file normalize metrics.db]
set db {./metrics.db}
set dryrun 0
set createdb 0
# set nolog 0
set reset 0
set id {}
set scripts [list]
set LSFQueue {medium}
set LSFMemory {8000}
set LSFCmd [format {bsub -app sil_rhel5 -q %%queue -R {rusage[mem=%%mem]} }]
set mode {localhost}
set unplaceDesign 0
set unrouteDesign 0
set reportTimingSummary {}
set reportDesignAnalysis {}
set reportUtilization {}
set reportClockInteraction {}
set reportRouteStatus {}
set standalone 0
set verbose 0
set debug 0
set quiet 0
set error 0
set help 0
set show_long_help 0
set cmdLineArguments $::argv
if {[llength $::argv] == 0} {
  set help 1
}
while {[llength $::argv]} {
  set name [lshift ::argv]
  switch -exact -- $name {
    -dcp -
    -checkpoint {
         set checkpoint [lshift ::argv]
    }
    -nodcp -
    -standalone {
         set standalone 1
    }
    -scr -
    -script {
         set script [file normalize [lshift ::argv]]
         if {![file exists $script]} {
           print error "file $script does not exist"
           incr error
         }
         if {[lsearch $scripts $script] == -1} {
           lappend scripts $script
         }
    }
    -id {
         set id [lshift ::argv]
    }
    -dry -
    -dry-run {
         set dryrun 1
    }
    -db {
         set db [lshift ::argv]
    }
    -p -
    -project {
         set project [lshift ::argv]
    }
    -r -
    -run {
         set run [lshift ::argv]
    }
    -ver -
    -version {
         set version [lshift ::argv]
    }
    -e -
    -experiment {
         set experiment [lshift ::argv]
    }
    -s -
    -step {
         set step [lshift ::argv]
    }
    -rel -
    -release -
    -vivado {
         set release [lshift ::argv]
    }
    -d -
    -desc -
    -description {
         set description [lshift ::argv]
    }
    -unplace {
         set unplaceDesign 1
    }
    -unroute {
         set unrouteDesign 1
    }
    -rts -
    -timing_summary -
    -report_timing_summary {
         set reportTimingSummary [lshift ::argv]
         if {![file exists $reportTimingSummary]} {
         	 print error "file '$reportTimingSummary' does not exist"
         	 incr error
        }
    }
    -rda -
    -design_analysis -
    -report_design_analysis {
         set reportDesignAnalysis [lshift ::argv]
         if {![file exists $reportDesignAnalysis]} {
         	 print error "file '$reportDesignAnalysis' does not exist"
         	 incr error
        }
    }
    -rci -
    -clock_interaction -
    -report_clock_interaction {
         set reportClockInteraction [lshift ::argv]
         if {![file exists $reportClockInteraction]} {
         	 print error "file '$reportClockInteraction' does not exist"
         	 incr error
        }
    }
    -ru -
    -report_utilization -
    -report_utilization {
         set reportUtilization [lshift ::argv]
         if {![file exists $reportUtilization]} {
         	 print error "file '$reportUtilization' does not exist"
         	 incr error
        }
    }
    -rrs -
    -route_status -
    -report_route_status {
         set reportRouteStatus [lshift ::argv]
         if {![file exists $reportRouteStatus]} {
         	 print error "file '$reportRouteStatus' does not exist"
         	 incr error
        }
    }
    -time {
         set time [lshift ::argv]
    }
    -lsf {
         set mode {lsf}
    }
    -lsf-queue {
         set LSFQueue [lshift ::argv]
    }
    -lsf-mem {
         set LSFMemory [lshift ::argv]
    }
    -lsf-cmd {
         set LSFCmd [lshift ::argv]
    }
    -createdb {
         set reset 1
    }
    -timeout {
         set timeout [lshift ::argv]
    }
    -verbose {
         set verbose 1
    }
    -quiet {
         set verbose 0
    }
    -debug {
         set debug 1
    }
    -nodebug {
         set debug 0
    }
    -h -
    -help {
         set help 1
    }
    -longhelp {
         set show_long_help 1
    }
    default {
          if {[string match "-*" $name]} {
            print error "option '$name' is not a valid option."
            incr error
          } else {
            print error "option '$name' is not a valid option."
            incr error
          }
    }
  }
}

if {$help} {
  print stdout [format {
Usage: take_snapshot
            -dcp <filename>|-nodcp
            [-db <filename>]
            [-createdb]
            [-id <snapshot_id>]
            [-project|-p <string>]
            [-release|-rel <string>]
            [-version|-ver <string>]
            [-experiment|-e <string>]
            [-step|-s <string>]
            [-run|-r <string>]
            [-description|-desc|-d <string>]
            [-unplace]
            [-unroute]
            [-scr <filename>|-script <filename>]
            [-rts <filename>|-report_timing_summary <filename>]
            [-rda <filename>|-report_design_analysis <filename>]
            [-rci <filename>|-report_clock_interaction <filename>]
            [-ru <filename>|-report_utilization <filename>]
            [-rrs <filename>|-report_route_status <filename>]
            [-time <time_in_seconds>]
            [-timeout <seconds>]
            [-lsf]
            [-lsf-mem <number>]
            [-lsf-queue <string>]
            [-lsf-cmd <string>]
            [-dry-run|-dry]
            [-verbose|-quiet]
            [-help|-h]

Description: Extract metrics from checkpoint and save snapshot

Example:
   take_snapshot -dcp post_route.dcp -createdb -step route_design
   take_snapshot -dcp post_route.dcp -script extract.tcl -step route_design
   take_snapshot -dcp post_route.dcp -script extract.tcl -step opt_design -unroute -unplace
   take_snapshot -dcp post_route.dcp -script extract.tcl -step route_design -lsf -lsf-mem 12000 -lsf-queue long
   take_snapshot -nodcp -step route_design -rts report_ts.rpt -rda report_da.rpt -rrs report_rs.rpt
} ]
  # HELP -->

  if {$show_long_help} { print_help }

  print stdout ""
  exit 0
}

if {$checkpoint == {}} {
	if {!$standalone} {
    print error "no checkpoint provided (-dcp)"
    incr error
  }
} else {
	if {$standalone} {
    print error "options -dcp and -nodcp are mutually exclusive"
    incr error
  }
}

if {$error} {
  print fatal "some error(s) happened. Cannot continue.\n"
  exit 1
}

# #-------------------------------------------------------
# # Open log file.
# #-------------------------------------------------------
# set logfile "take_snapshot.${step}.log"
# set logdir $data(log_dir)
# file mkdir $logdir
# # Backup log file
# backup_file ${logdir}/${logfile}
# if {![file exists $logdir]} { file mkdir $logdir }
# if {[catch {set FH [open ${logdir}/${logfile} {RDWR CREAT APPEND}]} returnstring]} {
#   print error "Could not create log file ${logdir}/${logfile}. The output from the script will not be logged."
#   set data(log_fh) {}
#   set data(log_filename) {}
# } else {
#   print info "Successfully created log file ${logdir}/${logfile}"
#   set data(log_fh) $FH
#   set data(log_filename) ${logdir}/${logfile}
#   catch {
#     print stdout "###########################################################"
#     print stdout "##"
#     print stdout "## take_snapshot log file"
#     print stdout "##"
#     print stdout "## Date              : [exec date]"
#     print stdout "## Working directory : [exec pwd]"
#     print stdout "## Hostname          : [exec hostname]"
#     print stdout "## User              : [exec whoami]"
#     print stdout "## Command line      : $cmdLineArguments"
#     print stdout "##"
#     print stdout "###########################################################"
#     print stdout ""
#   }
# }

set cmdLine [list ]
if {$createdb} { set cmdLine [concat $cmdLine -createdb] }
if {$db != {}} { set cmdLine [concat $cmdLine -db [list $db] ] }
if {$id != {}} { set cmdLine [concat $cmdLine -id [list $id] ] }
if {$project != {}} { set cmdLine [concat $cmdLine -project [list $project] ] }
if {$release != {}} { set cmdLine [concat $cmdLine -release [list $release] ] }
if {$version != {}} { set cmdLine [concat $cmdLine -version [list $version] ] }
if {$experiment != {}} { set cmdLine [concat $cmdLine -experiment [list $experiment] ] }
if {$run != {}} { set cmdLine [concat $cmdLine -run [list $run] ] }
if {$step != {}} { set cmdLine [concat $cmdLine -step [list $step] ] }
if {$description != {}} { set cmdLine [concat $cmdLine -description [list $description] ] }
if {$time != {}} { set cmdLine [concat $cmdLine -time [list $time] ] }
if {$timeout != {}} { set cmdLine [concat $cmdLine -timeout [list $timeout] ] }
if {$verbose} { set cmdLine [concat $cmdLine -verbose] }
if {$debug} { set cmdLine [concat $cmdLine -debug] }

#-------------------------------------------------------
# Standalone mode (no DCP)
#-------------------------------------------------------
if {$standalone} {
  if {[catch {
#     source /home/dpefour/git/scripts/wip/snapshot/snapshot
    lappend auto_path /home/dpefour/git/scripts/wip/snapshot
#     lappend auto_path /home/dpefour/git/scripts/toolbox/snapshot
    package require snapshot
    eval [concat snapshot configure $cmdLine]
    if {$reportTimingSummary != {}} {
    	snapshot addfile report.timing_summary $reportTimingSummary
    }
    if {$reportDesignAnalysis != {}} {
    	snapshot addfile report.design_analysis $reportDesignAnalysis
    }
    if {$reportClockInteraction != {}} {
    	snapshot addfile report.clock_interaction $reportClockInteraction
    }
    if {$reportUtilization != {}} {
    	snapshot addfile report.utilization $reportUtilization
    }
    if {$reportRouteStatus != {}} {
    	snapshot addfile report.route_status $reportRouteStatus
    }
    snapshot extract
    snapshot save
  } errorstring]} {
  	puts " -E- Extraction failed with the following error:"
  	foreach line [split $errorstring \n] { puts [format {     %s} $line] }
  	exit 1
  }
	puts " -I- Extraction completed on [clock format [clock seconds]]"
	exit 0
}

#-------------------------------------------------------
# Vivado mode (DCP)
#-------------------------------------------------------

# set vivadoCmdLine [list vivado -nolog -nojournal -notrace -mode batch -source /home/dpefour/git/scripts/wip/snapshot/snapshot.tcl -source take_snapshot.tmp.[pid]]
set vivadoCmdLine [list vivado -log vivado.log.[pid] -journal vivado.jou.[pid] -notrace -mode batch -source take_snapshot.tmp.[pid]]
# if {$checkpoint != {}} { set vivadoCmdLine [concat $vivadoCmdLine $checkpoint] }

# set FH [open take_snapshot.tmp {w}]
set FH [open take_snapshot.tmp.[pid] {w}]
puts $FH [format {#########################################################################
# Script generated on %s
# Command: take_snapshot %s
#########################################################################

# checkpoint
set checkpoint {%s}

# report_timing_summary report
set rts {%s}
# report_design_analysis report
set rda {%s}
# report_clock_interaction report
set rci {%s}
# report_utilization report
set ru {%s}
# report_route_status report
set rrs {%s}

# Load main script
# source /home/dpefour/git/scripts/toolbox/snapshot/snapshot
# lappend auto_path /home/dpefour/git/scripts/toolbox/snapshot
# package require snapshot
# package require extract
source /home/dpefour/git/scripts/wip/snapshot/snapshot
} [clock format [clock seconds]] \
  $cmdLineArguments \
  $checkpoint \
  [file normalize $reportTimingSummary] \
  [file normalize $reportDesignAnalysis] \
  [file normalize $reportClockInteraction] \
  [file normalize $reportUtilization] \
  [file normalize $reportRouteStatus] \
  ]

if {$scripts != {}} {
  puts $FH [format {# Remove default metrics
catch { namespace delete ::tb::snapshot::extract }
namespace eval ::tb::snapshot::extract {}

# Source user scripts}]
  foreach file $scripts {
    puts $FH "source $file"
  }
  puts $FH ""
}

puts $FH [format {if {[file exists $checkpoint]} {
  # Get file timestamp
  set timestamp [file mtime $checkpoint]

  # Open checkpoint
  open_checkpoint %s
  
  # Unroute design?
  if {%d} {
    catch {route_design -unroute}
  }

  # Unplace design?
  if {%d} {
    catch {place_design -unplace}
  }
  
  # Import reports if specified on the command line
  if {[file exists $rts]} {
  	snapshot addfile report.timing_summary $rts
  }
  if {[file exists $rda]} {
  	snapshot addfile report.design_analysis $rda
  }
  if {[file exists $rci]} {
  	snapshot addfile report.clock_interaction $rci
  }
  if {[file exists $ru]} {
  	snapshot addfile report.utilization $ru
  }
  if {[file exists $rrs]} {
  	snapshot addfile report.route_status $rrs
  }

  # Extract metrics and save snapshot into database
  if {[catch {take_snapshot -noreset -time $timestamp %s } errorstring]} {
    set FH [open "[file normalize [info script]].FAILED" {a}]
    puts $FH $errorstring
    close $FH
  } else {
    set FH [open "[file normalize [info script]].OK" {a}]
    puts -nonewline $FH [snapshot lastid]
    close $FH
  }
  
  # Close current design
  close_design
}
} [list $checkpoint] $unrouteDesign $unplaceDesign $cmdLine ]
  
close $FH

if {!$dryrun} {
  set clock_start [clock seconds]
  switch $mode {
    localhost {
      print info "Running Vivado on localhost"
      print info "Job: $vivadoCmdLine"
      set msg [system $vivadoCmdLine]
    }
    lsf {
      set LSFCmd [regsub -all {%queue} $LSFCmd $LSFQueue]
      set LSFCmd [regsub -all {%mem} $LSFCmd $LSFMemory]
      print info "Running Vivado on LSF"
      print info "Job: $LSFCmd $vivadoCmdLine"
      system [concat $LSFCmd $vivadoCmdLine]
    }
    default {
      print error "Unknown mode '$mode'"
    }
  }
  set clock_stop [clock seconds]
  
  if {$::errorCode != {NONE}} {
    print error "Some error(s) occured during the execution of the take_snapshot ($::errorCode)"
    incr error
  }
  
  print info "Duration: [duration [expr $clock_stop - $clock_start]]"
}

# #-------------------------------------------------------
# # Close log file.
# #-------------------------------------------------------
# if {$data(log_fh) != {}} {
#   catch { print info "Closing log file $data(log_filename) on [exec date]" }
#   print stdout "\n"
#   close $data(log_fh)
#   set data(log_fh) {}
#   set data(log_filename) {}
# }

#-------------------------------------------------------
# Done.
#-------------------------------------------------------
exit 0
