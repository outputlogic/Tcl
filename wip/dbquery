#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2014 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Description:    This utility execute a SQL query on SQLite database
##
########################################################################################

########################################################################################
## 2014.11.06 - Initial release
########################################################################################

# if {[file tail [info script]]!=[file tail $argv0]} {
#   # This file is sourced
#   error " ERROR - this script is meant to be executed and not sourced.\n"
# }

if {[catch {package require sqlite3}]} {
  lappend auto_path {/home/dpefour/root/usr/lib/sqlite3.8.0.2}
  package require sqlite3
}

namespace eval ::tb {}

namespace eval ::tb::dbquery {
  namespace export dbquery

  variable SCRIPT_VERSION {11-06-2014}
  variable VERBOSE 0
  variable DEBUG 0
  
  variable SQL
}

##-----------------------------------------------------------------------
## lshift unlshift
##-----------------------------------------------------------------------
## Stack functions
##-----------------------------------------------------------------------
proc ::tb::dbquery::lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc ::tb::dbquery::unlshift { ls data } {
   upvar 1 $ls LIST
   set LIST [concat $data $LIST]
}

#------------------------------------------------------------------------
# execSQL
#------------------------------------------------------------------------
# Execute SQL command
#------------------------------------------------------------------------
proc ::tb::dbquery::execSQL {&SQL {cmd {pragma integrity_check} } } {
  variable VERBOSE
  set loop 0
  set timeout 600
  # Wait for the database to be unlocked
#   while {[catch { uplevel [list ${&SQL} eval $cmd] } errorstring]} {}
  while {[catch { set res [uplevel [list ${&SQL} eval $cmd]] } errorstring]} {
    if {[regexp {database is locked} $errorstring]} {
      if {$VERBOSE} { puts "SQL database locked ..." }
      exec sleep 1
      incr loop
    } elseif {[regexp {attempt to write a readonly database} $errorstring]} {
      if {$VERBOSE} { puts "SQL database read-only ..." }
      exec sleep 1
      incr loop
    } else {
      error $errorstring
    }
    if {$loop > $timeout} { break }
  }
#   return 0
  return $res
}

##-----------------------------------------------------------------------
## dbquery
##-----------------------------------------------------------------------
## Main proc
##-----------------------------------------------------------------------
proc ::tb::dbquery::dbquery {args} {

  variable SCRIPT_VERSION
  variable VERBOSE
  variable DEBUG
  
  variable SQL

  set VERBOSE 0
  set DEBUG 0

  set query {}
  set error 0
  set show_help 0
  set ifilename {}
  if {[llength $args] == 0} {
    incr show_help
  }
  #-------------------------------------------------------
  # Process command line arguments
  #-------------------------------------------------------
  while {[llength $args]} {
    set name [lshift args]
    switch -exact -- $name {
      -db -
      --db {
        set ifilename [lshift args]
      }
      -s -
      --s -
      -sql -
      --sql {
        set query [lshift args]
      }
      -v -
      -verbose {
          set VERBOSE 1
      }
      -d -
      -debug {
          set DEBUG 1
          set VERBOSE 1
      }
      -h -
      -help {
          incr show_help
      }
      default {
          if {[string match "-*" $name]} {
            puts " -E- option '$name' is not a valid option"
            incr error
          } else {
            if {![file exists $name]} {
              puts " -W- file '$name' does not exist"
            } else {
              set ifilename $name
            }
#             puts " -E- option '$name' is not a valid option"
#             incr error
          }
      }
    }
  }

  if {$show_help} {
    # <-- HELP
    puts [format {
      Usage: dbquery
                  [-db <filename>]
                  [-sql <string>]
                  [-verbose|-v]
                  [-help|-h]

      Description: Utility to execute a SQL query on SQLite database

      Version: %s

      Example:
         dbquery -db file1.db -sql {SELECT * FROM table}
    } $SCRIPT_VERSION ]
    # HELP -->

    return -code ok
  }

  if  {$ifilename == {}} {
    puts " -E- no input database provided"
    incr error
  } elseif {![file exists $ifilename]} {
    puts " -E- no file $ifilename does not exist"
    incr error
  }

  if  {$query == {}} {
    puts " -E- no SQL query provided"
    incr error
  }

  if {$error} {
    error "\n Some error(s) occured. Cannot continue.\n"
#     exit -1
  }

  if {[catch {sqlite3 SQL[pid] $ifilename -readonly true} errorstring]} {
    error " -E- $errorstring"
  }
  set SQL SQL[pid]

  if {$VERBOSE} {
      puts " -I- database $ifilename"
  }

  if {[catch {set result [execSQL $SQL $query]} errorstring]} {
    # Close SQlite database
    $SQL close
    set SQL {}
    error " -E- $errorstring"
  } else {
  }

  # Close SQlite database
  $SQL close
  set SQL {}

  # Return the result from the query
  return $result
}

namespace eval ::tb {
  namespace import ::tb::dbquery::dbquery
}

##-----------------------------------------------------------------------
## GLOBAL VARIABLES
##-----------------------------------------------------------------------

set ::tb::dbquery::VERBOSE 0
set ::tb::dbquery::DEBUG 0

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced
  set QUIET 1
#   error " ERROR - this script is meant to be executed and not sourced.\n"
  if {!$QUIET} { puts " INFO - sourcing [info script]" }
#   ::tb::dbquery::dbquery
} else {
  if {[catch {set result [eval [concat ::tb::dbquery::dbquery $argv]]} errorstring]} {
    puts $errorstring
    # Close SQlite database
    catch { $::tb::dbinfo::SQL close }
    exit 1
  } else {
    # Print the result from the query
    puts $result
  }
  exit 0
}
