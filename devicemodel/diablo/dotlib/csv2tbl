#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

########################################################################################
## 05-01-2015 - Changed the behavior when multiple input CSV files are provided.
##              Each CSV file is now converted as a report and saved inside the same
##              directory
## 10-22-2013 - Initial release
########################################################################################

set SCRIPT_VERSION {05-01-2015}

# Convert CSV files to tables

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced
  error " ERROR - this script is meant to be executed and not sourced.\n"
}

##-----------------------------------------------------------------------
## Long help function
##-----------------------------------------------------------------------
proc print_help {} {

set help_message [format {
#########################################################################
#########################################################################
##
## msgutil
##
## Example:
##    csv2tbl
##
## Description:
##   Utility to convert CSV formated files to tables
##
## Options:
##
##   -csv                Input CSV file(s)
##
##   -out                Report file to save results
##
##   -delimiter          CSV delimiter
##                       Default: ,
##
#########################################################################
#########################################################################
} ]

  foreach line [split $help_message "\n"] {
    regsub {##} $line {  } line
    puts $line
  }

}

###########################################################################
##
## Simple package to handle printing of tables
##
## %> set tbl [Table::Create {this is my title}]
## %> $tbl header [list "name" "#Pins" "case_value" "user_case_value"]
## %> $tbl addrow [list A/B/C/D/E/F 12 - -]
## %> $tbl addrow [list A/B/C/D/E/F 24 1 -]
## %> $tbl separator
## %> $tbl addrow [list A/B/C/D/E/F 48 0 1]
## %> $tbl indent 0
## %> $tbl print
## +-------------+-------+------------+-----------------+
## | name        | #Pins | case_value | user_case_value |
## +-------------+-------+------------+-----------------+
## | A/B/C/D/E/F | 12    | -          | -               |
## | A/B/C/D/E/F | 24    | 1          | -               |
## +-------------+-------+------------+-----------------+
## | A/B/C/D/E/F | 48    | 0          | 1               |
## +-------------+-------+------------+-----------------+
## %> $tbl indent 2
## %> $tbl print
##   +-------------+-------+------------+-----------------+
##   | name        | #Pins | case_value | user_case_value |
##   +-------------+-------+------------+-----------------+
##   | A/B/C/D/E/F | 12    | -          | -               |
##   | A/B/C/D/E/F | 24    | 1          | -               |
##   +-------------+-------+------------+-----------------+
##   | A/B/C/D/E/F | 48    | 0          | 1               |
##   +-------------+-------+------------+-----------------+
## %> $tbl sort {-index 1 -increasing} {-index 2 -dictionary}
## %> $tbl print
## %> $tbl destroy
##
###########################################################################

# namespace eval Table { set n 0 }

# Trick to silence the linter
eval [list namespace eval Table {
  set n 0
} ]

proc Table::Create { {title {}} } { #-- constructor
  # Summary :
  # Argument Usage:
  # Return Value:

  variable n
  set instance [namespace current]::[incr n]
  namespace eval $instance { variable tbl [list]; variable header [list]; variable indent 0; variable title {}; variable numrows 0 }
  interp alias {} $instance {} Table::do $instance
  # Set the title
  $instance title $title
  set instance
}

proc Table::do {self method args} { #-- Dispatcher with methods
  # Summary :
  # Argument Usage:
  # Return Value:

  upvar #0 ${self}::tbl tbl
  upvar #0 ${self}::header header
  upvar #0 ${self}::numrows numrows
  switch -- $method {
      header {
        set header [lindex $args 0]
        return 0
      }
      addrow {
        eval lappend tbl $args
        incr numrows
        return 0
      }
      separator {
        eval lappend tbl {%%SEPARATOR%%}
        return 0
      }
      title {
        set ${self}::title [lindex $args 0]
        return 0
      }
      indent {
        set ${self}::indent $args
        return 0
      }
      print {
        eval Table::print $self
      }
      length {
        return $numrows
      }
      sort {
        # Each argument is a list of: <lsort arguments>
        set command {}
        while {[llength $args]} {
          if {$command == {}} {
            set command "lsort [[namespace parent]::lshift args] \$tbl"
          } else {
            set command "lsort [[namespace parent]::lshift args] \[$command\]"
          }
        }
        if {[catch { set tbl [eval $command] } errorstring]} {
          puts " -E- $errorstring"
        } else {
        }
      }
      reset {
        set ${self}::tbl [list]
        set ${self}::header [list]
        set ${self}::indent 0
        set ${self}::title {}
        return 0
      }
      destroy {
        set ${self}::tbl [list]
        set ${self}::header [list]
        set ${self}::indent 0
        set ${self}::title {}
        namespace delete $self
        return 0
      }
      default {error "unknown method $method"}
  }
}

proc Table::print {self} {
  # Summary :
  # Argument Usage:
  # Return Value:

   upvar #0 ${self}::tbl table
   upvar #0 ${self}::header header
   upvar #0 ${self}::indent indent
   upvar #0 ${self}::title title
   set maxs {}
   foreach item $header {
       lappend maxs [string length $item]
   }
   set numCols [llength $header]
   foreach row $table {
       if {$row eq {%%SEPARATOR%%}} { continue }
       for {set j 0} {$j<$numCols} {incr j} {
            set item [lindex $row $j]
            set max [lindex $maxs $j]
            if {[string length $item]>$max} {
               lset maxs $j [string length $item]
           }
       }
   }
  set head " [string repeat " " [expr $indent * 4]]+"
  foreach max $maxs {append head -[string repeat - $max]-+}

  # Generate the title
  if {$title ne {}} {
    # The upper separator should something like +----...----+
    append res " [string repeat " " [expr $indent * 4]]+[string repeat - [expr [string length [string trim $head]] -2]]+\n"
    # Suports multi-lines title
    foreach line [split $title \n] {
      append res " [string repeat " " [expr $indent * 4]]| "
      append res [format "%-[expr [string length [string trim $head]] -4]s" $line]
      append res " |\n"
    }
  }

  # Generate the table header
  append res $head\n
  # Generate the table rows
  set first 1
  foreach row [concat [list $header] $table] {
      if {$row eq {%%SEPARATOR%%}} {
        append res $head\n
        continue
      }
      append res " [string repeat " " [expr $indent * 4]]|"
      foreach item $row max $maxs {append res [format " %-${max}s |" $item]}
      append res \n
      if {$first} {
        append res $head\n
        set first 0
      }
  }
  append res $head
  set res
}



##-----------------------------------------------------------------------
## lshift unlshift
##-----------------------------------------------------------------------
## Stack functions
##-----------------------------------------------------------------------
proc lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc unlshift { ls data } {
   upvar 1 $ls LIST
   set LIST [concat $data $LIST]
}

##-----------------------------------------------------------------------
## K lequal
##-----------------------------------------------------------------------
## List functions
##-----------------------------------------------------------------------

proc K {a b} {return $a}

proc lequal {l1 l2} {
    if {[llength $l1] != [llength $l2]} {
        return false
    }

    set l2 [lsort $l2]

    foreach elem $l1 {
        set idx [lsearch -exact -sorted $l2 $elem]
        if {$idx == -1} {
            return false
        } else {
            set l2 [lreplace [K $l2 [unset l2]] $idx $idx]
        }
    }

    return [expr {[llength $l2] == 0}]
}

##-----------------------------------------------------------------------
## split-csv
##-----------------------------------------------------------------------
## Convert a CSV string to a Tcl list based on a field separator
##-----------------------------------------------------------------------
proc split-csv { str {sepChar ,} } {
  regsub -all {(\A\"|\"\Z)} $str \0 str
  set str [string map [list $sepChar\"\"$sepChar $sepChar$sepChar] $str]
  set str [string map [list $sepChar\"\"\" $sepChar\0\" \
                            \"\"\"$sepChar \"\0$sepChar \
                            $sepChar\"\"$sepChar $sepChar$sepChar \
                           \"\" \" \
                           \" \0 \
                           ] $str]
  set end 0
  while {[regexp -indices -start $end {(\0)[^\0]*(\0)} $str \
          -> start end]} {
      set start [lindex $start 0]
      set end   [lindex $end 0]
      set range [string range $str $start $end]
      set first [string first $sepChar $range]
      if {$first >= 0} {
          set str [string replace $str $start $end \
              [string map [list $sepChar \1] $range]]
      }
      incr end
  }
  set str [string map [list $sepChar \0 \1 $sepChar \0 {} ] $str]
  return [split $str \0]
}

##-----------------------------------------------------------------------
## read-csv
##-----------------------------------------------------------------------
## Read CSV file and return a Table object
##-----------------------------------------------------------------------
proc read-csv {&tbl filename {csvDelimiter ,}} {
  if {![file exists $filename]} {
    error " -E- file '$filename' does not exist"
  }
  upvar 1 ${&tbl} tbl
  set FH [open $filename]
  set first 1
  set count 0
  while {![eof $FH]} {
    gets $FH line
    # Skip comments and empty lines
    if {[regexp {^\s*#} $line]} { continue }
    if {[regexp {^\s*$} $line]} { continue }
    if {$first} {
      set header [split-csv $line $csvDelimiter]
      if {[subst $${tbl}::header] != {}} {
        # If we are in merge mode, then check that the header for this CSV file
        # does match the existing header
        if {![lequal [subst $${tbl}::header] $header]} {
          if {$::VERBOSE} {
            puts " -I- CSV header: $header"
            puts " -I- Table header: [subst $${tbl}::header]"
          }
          puts " -W- The CSV header does not match. File $filename skipped"
          return 1
        }
      }
      $tbl header $header
      set first 0
    } else {
      $tbl addrow [split-csv $line $csvDelimiter]
      incr count
    }
  }
  close $FH
  if {$::VERBOSE && ($::channel != {})} {
    puts $::channel " -I- Header: $header"
    puts $::channel " -I- Number of imported row(s): $count"
  }
  return 0
}

##-----------------------------------------------------------------------
## MAIN
##-----------------------------------------------------------------------

set VERBOSE 0
set DEBUG 0

set error 0
set show_help 0
set show_long_help 0
set ifilename [list]
set ofilename {}
set mode {w}
set csvDelimiter {,}
set merge 0
set channel {stdout}
if {[llength $argv] == 0} {
  incr show_help
}
#-------------------------------------------------------
# Process command line arguments
#-------------------------------------------------------
while {[llength $argv]} {
  set name [lshift argv]
  switch -exact -- $name {
    -csv -
    --csv {
      while {![string match "-*" [set filename [lshift argv]]]} {
        if {$filename == {}} {
          break
        } elseif {![file exists $filename]} {
          puts " -E- file '$filename' does not exist"
          incr error
        } else {
          lappend ifilename $filename
        }
      }
      # The last argument needs to be put back on the stack
      if {$filename != {}} { unlshift argv $filename }
    }
    -o -
    --o -
    -out -
    --out {
      set ofilename [lshift argv]
    }
    -delimiter -
    --delimiter {
      set csvDelimiter [lshift argv]
    }
    -a -
    --a -
    -append -
    --append {
      set mode {a}
    }
    -v -
    -verbose {
        set VERBOSE 1
    }
    -m -
    --m -
    -merge -
    --merge {
        set merge 1
    }
    -d -
    -debug {
        set DEBUG 1
        set VERBOSE 1
    }
    -h -
    -help {
        incr show_help
    }
    -longhelp {
        incr show_help
        incr show_long_help
    }
    default {
        if {[string match "-*" $name]} {
          puts " -E- option '$name' is not a valid option"
          incr error
        } else {
          puts " -E- option '$name' is not a valid option"
          incr error
        }
    }
  }
}

if {$show_help} {
  # <-- HELP
  puts [format {
    Usage: csv2tbl
                [-csv <filename> [<filename> ...]]
                [-delimiter <csv-delimiter>]
                [-out <filename>]
                [-merge]
                [-append|-a]
                [-verbose|-v]
                [-help|-h]
                [-longhelp]

    Description: Utility to convert CSV formated files to tables formated reports

    Version: %s

    Example:
       csv2tbl -csv file1.csv -delimiter ';'
       csv2tbl -csv *.csv -out result.rpt -merge

  } $SCRIPT_VERSION ]
  # HELP -->

  if {$show_long_help} { print_help }

  exit 0
}

if  {$ifilename == {}} {
  puts " -E- no input file provided"
  incr error
}

if {$error} {
  puts "\n Some error(s) occured. Cannot continue.\n"
  exit -1
}

set tbl [Table::Create]

set first 1
foreach filename $ifilename {
  if {$VERBOSE} {
    puts " -I- Processing file $filename"
  }
  if {$merge} {
    if {!$first} {
      $tbl separator
    }
    read-csv tbl $filename $csvDelimiter
    set first 0
  } else {
    $tbl reset
    $tbl title "CSV: [file normalize $filename]"
    read-csv tbl $filename $csvDelimiter
    # Generate the report file
    set ofilename "[file rootname $filename].rpt"
    if {[catch {set channel [open $ofilename $mode]} errorstring]} {
      puts " -E- $errorstring"
      exit 1
    }
    puts $channel "# -------------------------------------------------------"
    puts $channel [format {# Created on %s with csv2tbl} [clock format [clock seconds]] ]
    puts $channel "# -------------------------------------------------------\n"
    puts $channel "[$tbl print]\n"
    close $channel
    set channel {}
  }
}

if {$merge} {
  if {$ofilename != {}} {
    if {[catch {set channel [open $ofilename $mode]} errorstring]} {
      puts " -E- $errorstring"
      exit 1
    }
    puts $channel "# -------------------------------------------------------"
    puts $channel [format {# Created on %s with csv2tbl} [clock format [clock seconds]] ]
    puts $channel "# -------------------------------------------------------\n"
  }
  puts $channel [$tbl print]
}

if {($channel != {stdout}) && ($channel != {})} { close $channel }

exit 0
