#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

########################################################################################
## 10-25-2016 - Initial release
########################################################################################

# Check for missing timing arcs inside Dotlib files.
# The flow is to generate fragment files from Dotlib first with dotlib2tcl
# Once this is done, this script can be run.

set SCRIPT_VERSION {10-25-2016}

lappend auto_path /home/dpefour/git/scripts/toolbox
package require toolbox

lappend auto_path /wrk/hdstaff/dpefour/support/Olympus/assets/sqlite3.8.0.2
package require sqlite3

# Execute the SQL command. When failed, retry until the database is unlocked
proc wait_db_ready { &SQL {cmd {pragma integrity_check} } } {
  upvar &SQL SQL
  # Wait for the database to be unlocked
  while {[catch { SQL eval $cmd } errorstring]} {
    if {[regexp {database is locked} $errorstring]} {
      puts "SQL database locked ..."
      exec sleep 1
    } elseif {[regexp {attempt to write a readonly database} $errorstring]} {
      puts "SQL database read-only ..."
      exec sleep 1
    } else {
      error $errorstring
    }
  }
  return 0
}

# SQLite3 database
# set filename {sqlite3.db}
set filename {}

set error 0
set show_help 0
if {[llength $argv] == 0} {
  incr show_help
}
#-------------------------------------------------------
# Process command line arguments
#-------------------------------------------------------
while {[llength $argv]} {
  set name [::tb::lshift argv]
  switch -exact -- $name {
    -db -
    --db {
      set filename [::tb::lshift argv]
    }
    -v -
    -verbose {
        set VERBOSE 1
    }
    -d -
    -debug {
        set DEBUG 1
        set VERBOSE 1
    }
    -h -
    -help {
        incr show_help
    }
    default {
        if {[string match "-*" $name]} {
          puts " -E- option '$name' is not a valid option"
          incr error
        } else {
          puts " -E- option '$name' is not a valid option"
          incr error
        }
    }
  }
}

if {$show_help} {
  # <-- HELP
  puts [format {
    Usage: reportMaxSkew
                [-db <sqlite3 database>]
                [-verbose|-v]
                [-help|-h]

    Description: Utility to perform various Max Skew checks on the SQLite3 database

    Version: %s

    Example:
       reportMaxSkew
       reportMaxSkew -db './kintex7.db'

  } $SCRIPT_VERSION ]
  # HELP -->

  exit 0
}

if {$error} {
  puts "\n Some error(s) occured. Cannot continue.\n"
  exit -1
}

# SQLite3 database
if {![file exists $filename]} {
  error " File '$filename' does not exist"
}

# Open SQLite3 database
sqlite3 SQL $filename -readonly true
wait_db_ready SQL

# Get database version
set dbVersion [SQL eval { SELECT value FROM param WHERE property='version' LIMIT 1; } ]

set cells [SQL eval { SELECT name FROM cell ORDER BY name ASC }]


if {1} {
  puts [format {
########################################################################################
##
## Search for pins with skew_{rising|falling} checks but without an intrinsic_{rise|fall} attribute
##
########################################################################################
}]

  # Only for database version from 1.7 and upward
  if {$dbVersion >= 1.7} {
    catch {unset DB}
    # Find id of timing with skew_{rising|falling} and no intrinsic_{rise|fall}
    set timingids [lsort -unique [SQL eval {
      SELECT DISTINCT timingid
             FROM arc
             WHERE ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_rising%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) = '')
                   )
                OR ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_falling%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) = '')
                   )
      ;
    }] ]
    SQL eval "
      SELECT DISTINCT
             (SELECT name FROM cell WHERE id = arc.cellid ) AS 'cell',
             (SELECT name FROM pin WHERE id = arc.pinid ) AS 'pin',
             (SELECT name FROM pin WHERE id = arc.relatedpinid ) AS 'relatedpin',
             (SELECT direction FROM pin WHERE id = arc.pinid ) AS 'direction',
             (SELECT timing_type FROM timing WHERE id = arc.timingid ) AS 'timing_type',
             (SELECT intrinsic FROM timing WHERE id = arc.timingid ) AS 'intrinsic',
             id
      FROM arc
      WHERE arc.timingid IN ('[join $timingids ',']')
      ORDER BY cell, pin;
    " values {
      if {![info exists DB($values(cell))]} { set DB($values(cell)) [list] }
      lappend DB($values(cell)) [list $values(id) $values(pin) $values(direction) $values(relatedpin) $values(timing_type) $values(intrinsic)]
    }

    foreach cell [lsort -dictionary [array names DB]] {
      puts " Processing $cell"
      foreach elm $DB($cell) {
        foreach {id pin dir relatedpin type intrinsic} $elm { break }
        puts "   Found $dir pin '$pin' with '$type' check related to pin '$relatedpin' and no 'intrinsic_{rise|fall}' attribute"
#         puts "$cell,$pin,$dir,$type"
      }
    }
  } else {
    puts " UNSUPPORTED CHECK BY CURRENT DATABASE VERSION ($dbVersion)"
  }

}

if {1} {
  puts [format {
########################################################################################
##
## Search for pins with intrinsic_{rise|fall} attribute and no skew_{rising|falling} check
## (recovery/removal checks are filtered out)
##
########################################################################################
}]

  # Only for database version from 1.7 and upward
  if {$dbVersion >= 1.7} {
    catch {unset DB}
    # Find id of timing with intrinsic_{rise|fall} and no skew_{rising|falling}
    # Note: recovery/removal timing arcs are filtered out as they could be inside the Dotlib
    # for PT compatibility but ignored by Vivado
    set timingids [lsort -unique [SQL eval {
      SELECT DISTINCT timingid
             FROM arc
             WHERE ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) NOT LIKE '%skew_rising%')
               AND ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) NOT LIKE '%skew_falling%')
               AND ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) NOT LIKE '%recovery%')
               AND ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) NOT LIKE '%removal%')
               AND ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) != '')
      ;
    }] ]
    SQL eval "
      SELECT DISTINCT
             (SELECT name FROM cell WHERE id = arc.cellid ) AS 'cell',
             (SELECT name FROM pin WHERE id = arc.pinid ) AS 'pin',
             (SELECT name FROM pin WHERE id = arc.relatedpinid ) AS 'relatedpin',
             (SELECT direction FROM pin WHERE id = arc.pinid ) AS 'direction',
             (SELECT timing_type FROM timing WHERE id = arc.timingid ) AS 'timing_type',
             (SELECT intrinsic FROM timing WHERE id = arc.timingid ) AS 'intrinsic',
             id
      FROM arc
      WHERE arc.timingid IN ('[join $timingids ',']')
      ORDER BY cell, pin;
    " values {
      if {![info exists DB($values(cell))]} { set DB($values(cell)) [list] }
      lappend DB($values(cell)) [list $values(id) $values(pin) $values(direction) $values(relatedpin) $values(timing_type) $values(intrinsic)]
    }

    foreach cell [lsort -dictionary [array names DB]] {
      puts " Processing $cell"
      foreach elm $DB($cell) {
        foreach {id pin dir relatedpin type intrinsic} $elm { break }
        puts "   Found $dir pin '$pin' with '$type' check related to pin '$relatedpin' and 'intrinsic_${intrinsic}' attribute"
#         puts "$cell,$pin,$dir,$type"
      }
    }
  } else {
    puts " UNSUPPORTED CHECK BY CURRENT DATABASE VERSION ($dbVersion)"
  }

}

if {0} {
  puts [format {
########################################################################################
##
## Search for pins with skew_{rising|falling} check and intrinsic_{rise|fall} attribute
##
########################################################################################
}]

  # Only for database version from 1.7 and upward
  if {$dbVersion >= 1.7} {
    catch {unset DB}
    # Find id of timing with intrinsic_{rise|fall} and skew_{rising|falling}
    set timingids [lsort -unique [SQL eval {
      SELECT DISTINCT timingid
             FROM arc
             WHERE ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_rising%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) != '')
                   )
                OR ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_falling%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) != '')
                   )
      ;
    }] ]
    SQL eval "
      SELECT DISTINCT
             (SELECT name FROM cell WHERE id = arc.cellid ) AS 'cell',
             (SELECT name FROM pin WHERE id = arc.pinid ) AS 'pin',
             (SELECT name FROM pin WHERE id = arc.relatedpinid ) AS 'relatedpin',
             (SELECT direction FROM pin WHERE id = arc.pinid ) AS 'direction',
             (SELECT timing_type FROM timing WHERE id = arc.timingid ) AS 'timing_type',
             (SELECT intrinsic FROM timing WHERE id = arc.timingid ) AS 'intrinsic',
             id
      FROM arc
      WHERE arc.timingid IN ('[join $timingids ',']')
      ORDER BY cell, pin;
    " values {
      if {![info exists DB($values(cell))]} { set DB($values(cell)) [list] }
      lappend DB($values(cell)) [list $values(id) $values(pin) $values(direction) $values(relatedpin) $values(timing_type) $values(intrinsic)]
    }

    foreach cell [lsort -dictionary [array names DB]] {
      puts " Processing $cell"
      foreach elm $DB($cell) {
        foreach {id pin dir relatedpin type intrinsic} $elm { break }
        puts "   Found $dir pin '$pin' with '$type' check related to pin '$relatedpin' and 'intrinsic_${intrinsic}' attribute"
#         puts "$cell,$pin,$dir,$type"
      }
    }
  } else {
    puts " UNSUPPORTED CHECK BY CURRENT DATABASE VERSION ($dbVersion)"
  }

}

if {1} {
  puts [format {
########################################################################################
##
## Search for pins with same-edge skew_{rising|falling} check
##
########################################################################################
}]

  # Only for database version from 1.7 and upward
  if {$dbVersion >= 1.7} {
    catch {unset DB}
    # Find id of timing with intrinsic_{rise|fall} and skew_{rising|falling} (SAME EDGE)
    set timingids [lsort -unique [SQL eval {
      SELECT DISTINCT timingid
             FROM arc
             WHERE ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_rising%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) = 'rise')
                   )
                OR ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_falling%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) = 'fall')
                   )
      ;
    }] ]
    SQL eval "
      SELECT DISTINCT
             (SELECT name FROM cell WHERE id = arc.cellid ) AS 'cell',
             (SELECT name FROM pin WHERE id = arc.pinid ) AS 'pin',
             (SELECT name FROM pin WHERE id = arc.relatedpinid ) AS 'relatedpin',
             (SELECT direction FROM pin WHERE id = arc.pinid ) AS 'direction',
             (SELECT timing_type FROM timing WHERE id = arc.timingid ) AS 'timing_type',
             (SELECT intrinsic FROM timing WHERE id = arc.timingid ) AS 'intrinsic',
             id
      FROM arc
      WHERE arc.timingid IN ('[join $timingids ',']')
      ORDER BY cell, pin;
    " values {
      if {![info exists DB($values(cell))]} { set DB($values(cell)) [list] }
      lappend DB($values(cell)) [list $values(id) $values(pin) $values(direction) $values(relatedpin) $values(timing_type) $values(intrinsic)]
    }

    foreach cell [lsort -dictionary [array names DB]] {
      puts " Processing $cell"
      foreach elm $DB($cell) {
        foreach {id pin dir relatedpin type intrinsic} $elm { break }
        puts "   Found $dir pin '$pin' with '$type' check related to pin '$relatedpin' and 'intrinsic_${intrinsic}' attribute"
#         puts "$cell,$pin,$dir,$type"
      }
    }
  } else {
    puts " UNSUPPORTED CHECK BY CURRENT DATABASE VERSION ($dbVersion)"
  }

}

if {1} {
  puts [format {
########################################################################################
##
## Search for pins with opposite-edge skew_{rising|falling} check
##
########################################################################################
}]

  # Only for database version from 1.7 and upward
  if {$dbVersion >= 1.7} {
    catch {unset DB}
    # Find id of timing with intrinsic_{rise|fall} and skew_{rising|falling} (OPPOSITE EDGE)
    set timingids [lsort -unique [SQL eval {
      SELECT DISTINCT timingid
             FROM arc
             WHERE ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_rising%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) = 'fall')
                   )
                OR ( ((SELECT timing_type FROM timing WHERE timing.id=arc.timingid) LIKE '%skew_falling%')
                     AND
                     ((SELECT intrinsic FROM timing WHERE timing.id=arc.timingid) = 'rise')
                   )
      ;
    }] ]
    SQL eval "
      SELECT DISTINCT
             (SELECT name FROM cell WHERE id = arc.cellid ) AS 'cell',
             (SELECT name FROM pin WHERE id = arc.pinid ) AS 'pin',
             (SELECT name FROM pin WHERE id = arc.relatedpinid ) AS 'relatedpin',
             (SELECT direction FROM pin WHERE id = arc.pinid ) AS 'direction',
             (SELECT timing_type FROM timing WHERE id = arc.timingid ) AS 'timing_type',
             (SELECT intrinsic FROM timing WHERE id = arc.timingid ) AS 'intrinsic',
             id
      FROM arc
      WHERE arc.timingid IN ('[join $timingids ',']')
      ORDER BY cell, pin;
    " values {
      if {![info exists DB($values(cell))]} { set DB($values(cell)) [list] }
      lappend DB($values(cell)) [list $values(id) $values(pin) $values(direction) $values(relatedpin) $values(timing_type) $values(intrinsic)]
    }

    foreach cell [lsort -dictionary [array names DB]] {
      puts " Processing $cell"
      foreach elm $DB($cell) {
        foreach {id pin dir relatedpin type intrinsic} $elm { break }
        puts "   Found $dir pin '$pin' with '$type' check related to pin '$relatedpin' and 'intrinsic_${intrinsic}' attribute"
#         puts "$cell,$pin,$dir,$type"
      }
    }
  } else {
    puts " UNSUPPORTED CHECK BY CURRENT DATABASE VERSION ($dbVersion)"
  }

}



# Closing the SQLite3 database
SQL close

exit 0
