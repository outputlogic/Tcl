#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

set SCRIPT_VERSION {10-28-2013}

# Convert CSV files to HTML tables

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced
  error " ERROR - this script is meant to be executed and not sourced.\n"
}


##-----------------------------------------------------------------------
## txt2html
##-----------------------------------------------------------------------
## String to HTML conversion
##-----------------------------------------------------------------------
proc txt2html { string } {
  return [string map {&lt; &amp;lt; &gt; &amp;gt; &amp; &amp;amp; \&quot; &amp;quot;} $string]
}

##-----------------------------------------------------------------------
## lshift unlshift
##-----------------------------------------------------------------------
## Stack functions
##-----------------------------------------------------------------------
proc lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc unlshift { ls data } {
   upvar 1 $ls LIST
   set LIST [concat $data $LIST]
}

##-----------------------------------------------------------------------
## split-csv
##-----------------------------------------------------------------------
## Convert a CSV string to a Tcl list based on a field separator
##-----------------------------------------------------------------------
proc split-csv { str {sepChar ,} } {
  regsub -all {(\A\"|\"\Z)} $str \0 str
  set str [string map [list $sepChar\"\"$sepChar $sepChar$sepChar] $str]
  set str [string map [list $sepChar\"\"\" $sepChar\0\" \
                            \"\"\"$sepChar \"\0$sepChar \
                            $sepChar\"\"$sepChar $sepChar$sepChar \
                           \"\" \" \
                           \" \0 \
                           ] $str]
  set end 0
  while {[regexp -indices -start $end {(\0)[^\0]*(\0)} $str \
          -> start end]} {
      set start [lindex $start 0]
      set end   [lindex $end 0]
      set range [string range $str $start $end]
      set first [string first $sepChar $range]
      if {$first >= 0} {
          set str [string replace $str $start $end \
              [string map [list $sepChar \1] $range]]
      }
      incr end
  }
  set str [string map [list $sepChar \0 \1 $sepChar \0 {} ] $str]
  return [split $str \0]
}

##-----------------------------------------------------------------------
## read-csv
##-----------------------------------------------------------------------
## Read CSV file and return a Table object
##-----------------------------------------------------------------------
proc read-csv {&L filename {csvDelimiter ,}} {
  if {![file exists $filename]} {
    error " -E- file '$filename' does not exist"
  }
  upvar 1 ${&L} L
  set FH [open $filename]
  set first 1
  set count 0
  while {![eof $FH]} {
    gets $FH line
    # Skip comments and empty lines
    if {[regexp {^\s*#} $line]} { continue }
    if {[regexp {^\s*$} $line]} { continue }
    if {$first} {
      set header [split-csv $line $csvDelimiter]
      lappend L $header
      set first 0
    } else {
      lappend L [split-csv $line $csvDelimiter]
      incr count
    }
  }
  close $FH
  if {$::VERBOSE} {
    puts " -I- Header: $header"
    puts " -I- Number of imported row(s): $count"
  }
  return 0
}

##-----------------------------------------------------------------------
## MAIN
##-----------------------------------------------------------------------

set VERBOSE 0
set DEBUG 0

set error 0
set show_help 0
set ifilename [list]
set ofilename {}
set mode {w}
set csvDelimiter {,}
set channel {stdout}
set header 1
set body 1
set footer 1
set title {}
set diffcsv 0
if {[llength $argv] == 0} {
  incr show_help
}
#-------------------------------------------------------
# Process command line arguments
#-------------------------------------------------------
while {[llength $argv]} {
  set name [lshift argv]
  switch -exact -- $name {
    -title -
    --title {
      set title [lshift argv]
    }
    -csv -
    --csv {
      set ifilename [lshift argv]
    }
    -o -
    --o -
    -out -
    --out {
      set ofilename [lshift argv]
    }
    -delimiter -
    --delimiter {
      set csvDelimiter [lshift argv]
    }
    -a -
    --a -
    -append -
    --append {
      set mode {a}
    }
    -diff -
    -diff {
        set diffcsv 1
    }
    -v -
    -verbose {
        set VERBOSE 1
    }
    -d -
    -debug {
        set DEBUG 1
        set VERBOSE 1
    }
    -h -
    -help {
        incr show_help
    }
    default {
        if {[string match "-*" $name]} {
          puts " -E- option '$name' is not a valid option"
          incr error
        } else {
          puts " -E- option '$name' is not a valid option"
          incr error
        }
    }
  }
}

if {$show_help} {
  # <-- HELP
  puts [format {
    Usage: csv2html
                [-csv <filename>]
                [-delimiter <csv-delimiter>]
                [-diff]
                [-out <filename>]
                [-append|-a]
                [-verbose|-v]
                [-help|-h]

    Description: Utility to convert CSV formated files to HTML tables

    Version: %s

    Example:
       csv2html -csv file1.csv -delimiter ';'
       csv2html -csv file1.csv -out result.rpt
       csv2html -csv kintex7_kintex8_diff.csv -out result.rpt -diff

  } $SCRIPT_VERSION ]
  # HELP -->

  exit 0
}

if  {$ifilename == {}} {
  puts " -E- no input file provided"
  incr error
} elseif {![file exists $ifilename]} {
  puts " -E- file $ifilename does not exist"
  incr error
}

if {$error} {
  puts "\n Some error(s) occured. Cannot continue.\n"
  exit -1
}

if {$ofilename != {}} {
  if {[catch {set channel [open $ofilename $mode]} errorstring]} {
    puts " -E- $errorstring"
    exit 1
  }
}

set content [list]
if {$VERBOSE} {
  puts " -I- Processing file $ifilename"
}
read-csv content $ifilename $csvDelimiter
# puts $channel " # rows: [llength $content]"
# puts $channel " header: [lindex $content 0]"

##-----------------------------------------------------------------------
## HEADER
##-----------------------------------------------------------------------

if {$header} {

  puts $channel [format {
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <link rel="shortcut icon" type="image/ico" href="http://www.xilinx.com/favicon.ico" />
    <title>%s</title>
    <style type="text/css" title="currentStyle">
      @import "media/css/demo_page.css"; 
      /* @import "/media/css/header.ccss"; */
      /* @import "media/css/demo_table.css"; */
      @import "media/css/jquery.dataTables_themeroller.css";
      /* @import "____media/css/themes/smoothness/jquery-ui-1.8.4.custom.css"; */
      @import "http://code.jquery.com/ui/1.8.4/themes/smoothness/jquery-ui.css";
    </style>
    <style type="text/css" title="currentStyle">
      table.display tr.even.row_selected td {
        background-color: #B0BED9;
      }
      table.display tr.odd.row_selected td {
        background-color: #9FAFD1;
      }
      table.display tr.even.row_selected td.k7only {
        background-color: #B0BED9;
      }
      table.display tr.odd.row_selected td.k7only {
        background-color: #9FAFD1;
      }
      table.display tr.even.row_selected td.k8only {
        background-color: #B0BED9;
      }
      table.display tr.odd.row_selected td.k8only {
        background-color: #9FAFD1;
      }
      /* lavender */
      table.display tr.even td.k7only {
        background-color: #E6E6FA;
      }
      table.display tr.odd td.k7only {
        background-color: #E6E6FA;
      }
      /* PaleTurquoise */
      table.display tr.even td.k8only {
        background-color: #AFEEEE;
      }
      table.display tr.odd td.k8only {
        background-color: #AFEEEE;
      }
    </style>

    <script src="http://code.jquery.com/jquery-1.8.2.min.js"></script>

    <!-- <script type="text/javascript" language="javascript" src="____media/js/jquery.js"></script> -->
    <script type="text/javascript" language="javascript" src="media/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf-8">
        function fnShowHide( iCol )
        {
            /* Get the DataTables object again - this is not a recreation, just a get of the object */
            /*var oTable = $('#example').dataTable();*/
            var bVis = oTable.fnSettings().aoColumns[iCol].bVisible;
            oTable.fnSetColumnVis( iCol, bVis ? false : true );
        }
    </script>
} $ifilename ]

  if {$diffcsv} {
    puts $channel [format {
    <script type="text/javascript" charset="utf-8">
      var oTable;
      $(document).ready(function() {

          /* Add a click handler to the rows - this could be used as a callback */
          $("#csvtable tbody tr").click( function( e ) {
            if ( $(this).hasClass('row_selected') ) {
                $(this).removeClass('row_selected');
            }
            else {
                oTable.$('tr.row_selected').removeClass('row_selected');
                $(this).addClass('row_selected');
            }
          });
        
          $('#csvtable').dataTable( {
              "aaSorting": [[4, 'asc']],
              "aoColumnDefs": [
                { "bVisible": false, "aTargets": [ 0 ] },
                { "bVisible": false, "aTargets": [ 1 ] },
                { "bVisible": false, "aTargets": [ 2 ] },
                { "bVisible": false, "aTargets": [ 3 ] },
                { "bSearchable": false, "aTargets": [ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 ] }
              ],
              "bJQueryUI": true,
              "sPaginationType": "full_numbers",
              "bPaginate": false
           } );
           
           /* Add a click handler for the first 4 columns */
           $('#showHideOriginalNames').click( function() {
               $('body').css('cursor','progress');
               fnShowHide(0);
               fnShowHide(1);
               fnShowHide(2);
               fnShowHide(3);
               $('body').css('cursor','default');
           } );
            
           /* Add a click handler for matching rows */
           $('#showHideMachingRows').click( function() {
               $("tr.matchrow").toggle();
           } );
            
           /* Add a click handler for matching rows */
           $('#showHideMismachingRows').click( function() {
               $("tr.mismatchrow").toggle();
           } );
            
           /* Add a click handler for matching rows */
           $('#showHideK7OnlyRows').click( function() {
               $("tr.k7onlyrow").toggle();
           } );
            
           /* Add a click handler for matching rows */
           $('#showHideK8OnlyRows').click( function() {
               $("tr.k8onlyrow").toggle();
           } );
            
          /* Init the table */
          oTable = $('#csvtable').dataTable();
        
      } );
    </script>
} ]
  } else {
    puts $channel [format {
    <script type="text/javascript" charset="utf-8">
      var oTable;
      $(document).ready(function() {

          /* Add a click handler to the rows - this could be used as a callback */
          $("#csvtable tbody tr").click( function( e ) {
            if ( $(this).hasClass('row_selected') ) {
                $(this).removeClass('row_selected');
            }
            else {
                oTable.$('tr.row_selected').removeClass('row_selected');
                $(this).addClass('row_selected');
            }
          });
        
          $('#csvtable').dataTable( {
              "aaSorting": [[0, 'asc']],
              "aoColumnDefs": [
                { "bSearchable": false, "aTargets": [ 2, 3, 4, 5, 6, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 ] }
              ],
              "bJQueryUI": true,
              "sPaginationType": "full_numbers",
              "bPaginate": false
           } );
           
           /* Add a click handler for the first 4 columns */
           $('#showHideOriginalNames').click( function() {
               $('body').css('cursor','progress');
               fnShowHide(0);
               fnShowHide(1);
               fnShowHide(2);
               fnShowHide(3);
               $('body').css('cursor','default');
           } );
            
          /* Init the table */
          oTable = $('#csvtable').dataTable();
        
      } );
    </script>
} ]
  }

  puts $channel [format {
    <script type="text/javascript" charset="utf-8">
      $(document).ready(function() {
        /* $('.k7only').css('background-color', 'lavender'); */
        /* $('.k8only').css('background-color', 'PaleTurquoise'); */
        /* $('.match').css('background-color', 'lightblue'); */
        $('.mismatch').css('background-color', 'brown');
      } );
    </script>
    
</head>
} ]

# [format {Created on %s with csv2html} [clock format [clock seconds]] ]

}

##-----------------------------------------------------------------------
## BODY
##-----------------------------------------------------------------------

if {$body} {

  if {$diffcsv} {
    puts $channel [format {
     <p><a href="javascript:void(0)" id="showHideOriginalNames">Show/Hide Original Cell And Pin Names</a></p>
     <p>
       <a href="javascript:void(0)" id="showHideMachingRows">Show/Hide Matching Rows</a> / 
       <a href="javascript:void(0)" id="showHideK7OnlyRows">Show/Hide K7 Only Rows</a> /
       <a href="javascript:void(0)" id="showHideK8OnlyRows">Show/Hide K8 Only Rows</a> /
       <a href="javascript:void(0)" id="showHideMismachingRows">Show/Hide Mismatching Rows</a>
     </p>}]
  }

  puts $channel [format {
     <div class="container_wrapper">
        <h1>%s</h1>
} [txt2html $title] ]

  puts $channel [format {
        <table cellpadding="0" cellspacing="0" border="1" class="display" id="csvtable">
          <thead>
            <tr> }]

  foreach elm [lindex $content 0] {
    puts $channel [format {
              <th>%s</th> } [txt2html $elm] ]
  }

  puts $channel [format {
            </tr>
          </thead>
          <tbody> }]

  foreach row [lrange $content 1 end] {
#     puts $channel [format {
#             <tr class="odd gradeX"> }]

    # Index in the row (i.e column number), not counting the cell name and K7/K8 pin name columns
    set index 0
    set mismatch 0
    set rowType {}
    set rowHTML [list]
    # Lisy of columns that have a mismatch
    set mismatchCol [list]
    # Scan the row a first time to build the list of colomns that have a mismatch
    set colNum 0
    foreach elm $row header [lindex $content 0] {
      if {$diffcsv} {
        if {($elm >= 1) && ($colNum >= 9)} {
          lappend mismatchCol $header
        }
        incr colNum
      }
    }
    # The second pass is to build the HTML
    foreach elm $row header [lindex $content 0] {
      set class {}
      if {$diffcsv} {
        # Only add a class to the table cell if this is HTML for a DIFF CSV
        switch -exact -- $elm {
          -2 {
            set class { class="k7only"}
            set rowType {k7only}
          }
          -1 {
            set class { class="k8only"}
            set rowType {k8only}
          }
          0 {
            set class { class="match"}
          }
          1 {
            if {$header != {Num Mismatchs}} {
              set class [format { class="mismatch" title="%s"} $header]
            } else {
              set class [format { class="mismatch" title="%s"} [join [lsort $mismatchCol] \n]]
            }
            incr mismatch
            set rowType {mismatch}
          }
          default {
            if {[regexp {^[0-9]+$} $elm]} {
              # The column {Num Mismatch} can have numbers above 1. This is covered here
              if {$header != {Num Mismatchs}} {
                set class [format { class="mismatch" title="%s"} $header]
              } else {
                set class [format { class="mismatch" title="%s"} [join [lsort $mismatchCol] \n]]
              }
              incr mismatch
              set rowType {mismatch}
            }
          }
        }
      }
      lappend rowHTML [format {
              <td%s>%s</td> } $class [txt2html $elm] ]
      incr index
    }
    
    switch $rowType {
      k7only {
        set class {k7onlyrow}
      }
      k8only {
        set class {k8onlyrow}
      }
      mismatch {
        set class {mismatchrow}
      }
      default {
        set class {matchrow}
      }
    }
    puts $channel [format {
            <tr class="odd gradeX %s"> } $class]
    puts $channel [join $rowHTML \n]
    puts $channel [format {
            </tr> }]
    
  }

  puts $channel [format {
          </tbody>
        </table>
     </div>
}]

}

##-----------------------------------------------------------------------
## FOOTER
##-----------------------------------------------------------------------

if {$footer} {

  puts $channel [format {
  </body>
</html>
}]

}


if {$channel != {stdout}} { close $channel }

exit 0
