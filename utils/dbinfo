#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" -- ${1+"$@"}

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2016 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Version:        2016.05.04
## Description:    This utility provides information on SQLite database
##
########################################################################################

########################################################################################
## 2016.05.04 - Added support for -dump
##            - Added support for -table
## 2016.04.04 - Modified sh exec command to execute script
## 2016.02.03 - Added support for pattern to specify database
## 2014.11.06 - Initial release
########################################################################################

# if {[file tail [info script]]!=[file tail $argv0]} {
#   # This file is sourced
#   error " ERROR - this script is meant to be executed and not sourced.\n"
# }

if {[catch {package require sqlite3}]} {
  lappend auto_path {/home/dpefour/root/usr/lib/sqlite3.8.0.2}
  package require sqlite3
}

if {[catch {package require prettyTable}]} {
  lappend auto_path {/home/dpefour/git/scripts/toolbox}
  package require prettyTable
}

namespace eval ::tb {}

namespace eval ::tb::dbinfo {
  namespace export dbinfo

  variable SCRIPT_VERSION {2016.05.04}
  variable VERBOSE 0
  variable DEBUG 0

  variable SQL
}

##-----------------------------------------------------------------------
## lshift unlshift
##-----------------------------------------------------------------------
## Stack functions
##-----------------------------------------------------------------------
proc ::tb::dbinfo::lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc ::tb::dbinfo::unlshift { ls data } {
   upvar 1 $ls LIST
   set LIST [concat $data $LIST]
}

#------------------------------------------------------------------------
# execSQL
#------------------------------------------------------------------------
# Execute SQL command
#------------------------------------------------------------------------
proc ::tb::dbinfo::execSQL {&SQL {cmd {pragma integrity_check} } } {
  variable VERBOSE
  set loop 0
  set timeout 600
  # Wait for the database to be unlocked
#   while {[catch { uplevel [list ${&SQL} eval $cmd] } errorstring]} {}
  while {[catch { set res [uplevel [list ${&SQL} eval $cmd]] } errorstring]} {
    if {[regexp {database is locked} $errorstring]} {
      if {$VERBOSE} { puts "SQL database locked ..." }
      exec sleep 1
      incr loop
    } elseif {[regexp {attempt to write a readonly database} $errorstring]} {
      if {$VERBOSE} { puts "SQL database read-only ..." }
      exec sleep 1
      incr loop
    } else {
      error $errorstring
    }
    if {$loop > $timeout} { break }
  }
#   return 0
  return $res
}

#------------------------------------------------------------------------
# dbGetTableColumns
#------------------------------------------------------------------------
# Get the list of columns of a SQL table
#------------------------------------------------------------------------
proc ::tb::dbinfo::dbGetTableColumns {&SQL table} {
  variable DEBUG
  set tables [dbGetTables ${&SQL}]
  if {[lsearch -exact $tables $table] == -1} {
    puts " -E- table '$table' does not exist"
    return -1
  }
  set L [execSQL ${&SQL} [format {pragma table_info(%s);} $table]]
  set cols [list]
  foreach [list cid name type notnull dflt_value pk] $L {
#     # Skip the first 2 columns: id tag
#     if {[regexp {^(id|tag)$} $name]} { continue }
    lappend cols $name
  }
  if {$DEBUG} {
    puts "dbGetTableColumns: table: $table"
    puts "dbGetTableColumns: $cols"
  }
  return $cols
}

#------------------------------------------------------------------------
# dbGetTables
#------------------------------------------------------------------------
# Get the list of SQL tables
#------------------------------------------------------------------------
proc ::tb::dbinfo::dbGetTables {&SQL} {
  variable DEBUG
  set tables [${&SQL} eval { SELECT name FROM sqlite_master WHERE type='table' }]
  if {$DEBUG} {
    puts "dbGetTables: $tables"
  }
  return $tables
}

##-----------------------------------------------------------------------
## dbinfo
##-----------------------------------------------------------------------
## Main proc
##-----------------------------------------------------------------------
proc ::tb::dbinfo::dbinfo {args} {

  variable SCRIPT_VERSION
  variable VERBOSE
  variable DEBUG

  variable SQL

  set VERBOSE 0
  set DEBUG 0

  set sqltable {}
  set dump 0
  set error 0
  set show_help 0
  set ifilenames {}
  if {[llength $args] == 0} {
    incr show_help
  }
  #-------------------------------------------------------
  # Process command line arguments
  #-------------------------------------------------------
  while {[llength $args]} {
    set name [lshift args]
    switch -exact -- $name {
      -db -
      --db {
        foreach pattern [lshift args] {
          foreach file [glob -nocomplain $pattern] {
            if {![file exists $file]} {
              puts " -E- File '$file' does not exist"
              incr error
              continue
            }
            lappend ifilenames [file normalize $file]
          }
        }
        set ifilenames [lsort -unique $ifilenames]
      }
      -dump -
      -dump {
        set dump 1
      }
      -t -
      -ta -
      -tab -
      -tabl -
      -table {
        set sqltable [lshift args]
      }
      -v -
      -verbose {
        set VERBOSE 1
      }
      -d -
      -debug {
        set DEBUG 1
        set VERBOSE 1
      }
      -h -
      -help {
        incr show_help
      }
      default {
        if {[string match "-*" $name]} {
          puts " -E- option '$name' is not a valid option"
          incr error
        } else {
          if {![file exists $name]} {
            puts " -W- file '$name' does not exist"
          } else {
            foreach file [glob -nocomplain $name] {
              if {![file exists $file]} {
                puts " -E- File '$file' does not exist"
                incr error
                continue
              }
              lappend ifilenames [file normalize $file]
            }
            set ifilenames [lsort -unique $ifilenames]
          }
#           puts " -E- option '$name' is not a valid option"
#           incr error
        }
      }
    }
  }

  if {$show_help} {
    # <-- HELP
    puts [format {
      Usage: dbinfo
                  [<pattern>][-db <filename>][-db <pattern>]
                  [-table <sqltable>]
                  [-dump]
                  [-verbose|-v]
                  [-help|-h]

      Description: Utility to provides information on SQLite database

      Version: %s

      Example:
         dbinfo -db file1.db
         dbinfo -db '*/metrics.db' -dump
         dbinfo -db '*/metrics.db' -dump -table csv0
         dbinfo -db '*/metrics.db' -dump -table 'csv*'
    } $SCRIPT_VERSION ]
    # HELP -->

    return -code ok
  }

  if  {$ifilenames == {}} {
    puts " -E- no input database provided"
    incr error
  }

  if {$error} {
    error "\n Some error(s) occured. Cannot continue.\n"
#     exit -1
  }

  foreach database $ifilenames {
    if {[catch {sqlite3 SQL[pid] $database -readonly true} errorstring]} {
      error " -E- $errorstring"
    }
    set SQL SQL[pid]

    set tables [dbGetTables $SQL]
    # Remove 'sqlite_sequence' from the list
    set tables [lsearch -inline -all -not -exact $tables {sqlite_sequence}]

    if {$sqltable != {}} {
      set L [list]
      foreach idx [lsearch -all -glob $tables $sqltable] {
        lappend L [lindex $tables $idx]
      }
      if {[llength $L] == 0} {
        puts " -E- table '$sqltable' does not exist"
        # Close SQlite database
        $SQL close
        set SQL {}
        return -code ok
      }
      set tables $L
    }

    if {$VERBOSE} {
        puts " -I- database $database"
        puts " -I- tables \[[llength $tables]\]: [lsort $tables]"
    }

    foreach table [lsort $tables] {
      set columns [dbGetTableColumns $SQL $table]
      set count [execSQL $SQL [format {SELECT count(*) FROM '%s' ;} $table]]
      puts " -I- Table: '$table' \t # columns = [llength $columns] \t # entries = $count"
      if {$VERBOSE} { puts " -I- Columns: $columns" }
      if {$dump} {
        # Dump the table content
        set tbl [::tb::prettyTable]
        if {$VERBOSE} {
          $tbl configure -title "$table ($database)"
        } else {
          $tbl configure -title "$table"
        }
        $tbl header $columns
        catch {unset values}
        execSQL $SQL {pragma integrity_check}
        $SQL eval [format {SELECT * FROM '%s' ;} $table] values {
          set row [list]
          foreach col $columns {
            lappend row $values($col)
          }
          $tbl addrow $row
        }
        puts [$tbl print]
        catch {$tbl destroy}
      }
    }

    # Close SQlite database
    $SQL close
    set SQL {}
  }

  return -code ok
}

namespace eval ::tb {
  namespace import ::tb::dbinfo::dbinfo
}

##-----------------------------------------------------------------------
## GLOBAL VARIABLES
##-----------------------------------------------------------------------

set ::tb::dbinfo::VERBOSE 0
set ::tb::dbinfo::DEBUG 0

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced
  set QUIET 1
#   error " ERROR - this script is meant to be executed and not sourced.\n"
  if {!$QUIET} { puts " INFO - sourcing [info script]" }
#   ::tb::dbinfo::dbinfo
} else {
  # Remove first '--' due to magic exec: exec tclsh "$0" -- ${1+"$@"}
  set ::argv [lrange $::argv 1 end]
  if {[catch {eval [concat ::tb::dbinfo::dbinfo $argv]} errorstring]} {
    puts $errorstring
    # Close SQlite database
    catch { $::tb::dbinfo::SQL close }
    exit 1
  }
  exit 0
}
