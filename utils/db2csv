#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2014 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Description:    This utility provides to way to convert SQLite database to CSV files
##
########################################################################################

########################################################################################
## 2014.11.12 - Added a 'catch' for when the variable does not exist
## 2014.11.06 - Initial release
########################################################################################

# if {[file tail [info script]]!=[file tail $argv0]} {
#   # This file is sourced
#   error " ERROR - this script is meant to be executed and not sourced.\n"
# }

if {[catch {package require sqlite3}]} {
  lappend auto_path {/home/dpefour/root/usr/lib/sqlite3.8.0.2}
  package require sqlite3
}

namespace eval ::tb {}

namespace eval ::tb::db2csv {
  namespace export db2csv

  variable SCRIPT_VERSION {11-12-2014}
  variable VERBOSE 0
  variable DEBUG 0

  variable SQL
}

##-----------------------------------------------------------------------
## Long help function
##-----------------------------------------------------------------------
proc ::tb::db2csv::print_help {} {

set help_message [format {
#########################################################################
#########################################################################
##
## db2csv
##
## Example:
##    db2csv
##
## Description:
##   Utility to convert table(s) from SQLite database to CSV file(s)
##
## Options:
##
##   -db                Input SQLite database(s)
##
##   -out                CSV file to save results
##
##   -delimiter          CSV delimiter
##                       Default: ,
##
#########################################################################
#########################################################################
} ]

  foreach line [split $help_message "\n"] {
    regsub {##} $line {  } line
    puts $line
  }

}

##-----------------------------------------------------------------------
## lshift unlshift
##-----------------------------------------------------------------------
## Stack functions
##-----------------------------------------------------------------------
proc ::tb::db2csv::lshift { inputlist } {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc ::tb::db2csv::unlshift { ls data } {
   upvar 1 $ls LIST
   set LIST [concat $data $LIST]
}

##-----------------------------------------------------------------------
## join-csv
##-----------------------------------------------------------------------
## Convert a Tcl list to a CSV-friedly string
##-----------------------------------------------------------------------
proc ::tb::db2csv::join-csv { list {sepChar ,} } {
  set out ""
  set sep {}
  foreach val $list {
    if {[string match "*\[\"$sepChar\]*" $val]} {
      append out $sep\"[string map [list \" \"\"] $val]\"
    } else {
      append out $sep\"$val\"
    }
    set sep $sepChar
  }
  return $out
}

#------------------------------------------------------------------------
# execSQL
#------------------------------------------------------------------------
# Execute SQL command
#------------------------------------------------------------------------
proc ::tb::db2csv::execSQL {&SQL {cmd {pragma integrity_check} } } {
  variable VERBOSE
  set loop 0
  set timeout 600
  # Wait for the database to be unlocked
#   while {[catch { uplevel [list ${&SQL} eval $cmd] } errorstring]} {}
  while {[catch { set res [uplevel [list ${&SQL} eval $cmd]] } errorstring]} {
    if {[regexp {database is locked} $errorstring]} {
      if {$VERBOSE} { puts "SQL database locked ..." }
      exec sleep 1
      incr loop
    } elseif {[regexp {attempt to write a readonly database} $errorstring]} {
      if {$VERBOSE} { puts "SQL database read-only ..." }
      exec sleep 1
      incr loop
    } else {
      error $errorstring
    }
    if {$loop > $timeout} { break }
  }
#   return 0
  return $res
}

#------------------------------------------------------------------------
# dbGetTableColumns
#------------------------------------------------------------------------
# Get the list of columns of a SQL table
#------------------------------------------------------------------------
proc ::tb::db2csv::dbGetTableColumns {&SQL table} {
  variable DEBUG
  set tables [dbGetTables ${&SQL}]
  if {[lsearch -exact $tables $table] == -1} {
    puts " -E- table '$table' does not exist"
    return -1
  }
  set L [execSQL ${&SQL} [format {pragma table_info(%s);} $table]]
  set cols [list]
  foreach [list cid name type notnull dflt_value pk] $L {
#     # Skip the first 2 columns: id tag
#     if {[regexp {^(id|tag)$} $name]} { continue }
    lappend cols $name
  }
  if {$DEBUG} {
    puts "dbGetTableColumns: table: $table"
    puts "dbGetTableColumns: $cols"
  }
  return $cols
}

#------------------------------------------------------------------------
# dbGetTables
#------------------------------------------------------------------------
# Get the list of SQL tables
#------------------------------------------------------------------------
proc ::tb::db2csv::dbGetTables {&SQL} {
  variable DEBUG
  set tables [${&SQL} eval { SELECT name FROM sqlite_master WHERE type='table' }]
  if {$DEBUG} {
    puts "dbGetTables: $tables"
  }
  return $tables
}

#------------------------------------------------------------------------
# dbGetTableHeader
#------------------------------------------------------------------------
# Get the headr matching the table. The header is extracted from the
# 'headers' table.
#------------------------------------------------------------------------
proc ::tb::db2csv::dbGetTableHeader {&SQL table} {
  variable DEBUG
  set tables [dbGetTables ${&SQL}]
  if {[lsearch -exact $tables $table] == -1} {
    puts " -E- table '$table' does not exist"
    return -1
  }
  set columns [dbGetTableColumns ${&SQL} $table]
#   # Remove columns 'id' and 'tag' from the list
#   set columns [lsearch -inline -all -not -exact $columns {id}]
#   set columns [lsearch -inline -all -not -exact $columns {tag}]
  set size [llength $columns]
  set L [execSQL ${&SQL} [format {SELECT * FROM headers WHERE tag='%s';} $table]]
  # Only return the number of columns that fit the size of the table. This is
  # a workaround to remove the trailing {}
  if {$DEBUG} {
    puts "dbGetTableHeader: table: $table"
    puts "dbGetTableHeader: [lrange $L 0 [expr $size -1]]"
#     puts "dbGetTableHeader: [lrange $L 2 [expr 2 + $size -1]]"
  }
  # Return the list of columns but not the first 2 columns (matching 'id' and 'tag'
#   return [lrange $L 2 [expr 2 + $size -1]]
  return [lrange $L 0 [expr $size -1]]
}

##-----------------------------------------------------------------------
## db2csv
##-----------------------------------------------------------------------
## Main proc
##-----------------------------------------------------------------------
proc ::tb::db2csv::db2csv {args} {

  variable SCRIPT_VERSION
  variable VERBOSE
  variable DEBUG

  variable SQL

  set VERBOSE 0
  set DEBUG 0

  set error 0
  set show_help 0
  set show_long_help 0
  set ifilename {}
  set ofilename {}
  set tableName {}
  set csvDelimiter {,}
  set force 0
  if {[llength $args] == 0} {
    incr show_help
  }
  #-------------------------------------------------------
  # Process command line arguments
  #-------------------------------------------------------
  while {[llength $args]} {
    set name [lshift args]
    switch -exact -- $name {
      -db -
      --db {
        set ifilename [lshift args]
      }
      -csv -
      --csv -
      -o -
      --o -
      -out -
      --out {
        set ofilename [lshift args]
      }
      -t -
      --t -
      -table -
      --table {
        set tableName [lshift args]
      }
      -delimiter -
      --delimiter {
        set csvDelimiter [lshift args]
      }
      -v -
      -verbose {
          set VERBOSE 1
      }
      -f -
      --f -
      -force -
      --force {
          set force 1
      }
      -d -
      -debug {
          set DEBUG 1
          set VERBOSE 1
      }
      -h -
      -help {
          incr show_help
      }
      -longhelp {
          incr show_help
          incr show_long_help
      }
      default {
          if {[string match "-*" $name]} {
            puts " -E- option '$name' is not a valid option"
            incr error
          } else {
            if {![file exists $name]} {
              puts " -W- file '$name' does not exist"
            } else {
              set ifilename $name
            }
#             puts " -E- option '$name' is not a valid option"
#             incr error
          }
      }
    }
  }

  if {$show_help} {
    # <-- HELP
    puts [format {
      Usage: db2csv
                  [<filename>]
                  [-db <filename>]
                  [-delimiter <csv-delimiter>]
                  [-out <prefix>|-csv <prefix>]
                  [-table <string>|-t <string>]
                  [-force|-f]
                  [-verbose|-v]
                  [-help|-h]
                  [-longhelp]

      Description: Utility to convert SQLite tables to CSV formated files

      Version: %s

        -table can specify a single table name or a regexp pattern

      Example:
         db2csv -db file1.db -delimiter ';'
         db2csv -db file1.db -table '.*' -csv res
    } $SCRIPT_VERSION ]
    # HELP -->

    if {$show_long_help} { print_help }

    return -code ok
  }

  if  {$ifilename == {}} {
    puts " -E- no input database provided"
    incr error
  } elseif {![file exists $ifilename]} {
    puts " -E- no file $ifilename does not exist"
    incr error
  }

  if  {$ofilename == {}} {
    set ofilename "[file rootname [file tail $ifilename]]"
# puts "<ofilename:$ofilename>"
  }

  if  {$ofilename == {}} {
    puts " -E- no output CSV file provided"
    incr error
  } elseif {[file exists $ofilename]} {
    switch ${force} {
      0 {
        puts " -E- file [file normalize $ofilename] already exists"
        incr error
      }
      1 {
        puts " -W- database [file normalize $ofilename] is overriden (-force)"
        # Delete existing database if it already exist
        catch {file delete -force $ofilename}
      }
      default {
      }
    }
  }

  if  {$tableName == {}} {
    puts " -E- no table specified (-table)"
    incr error
  }

  if {$error} {
    error "\n Some error(s) occured. Cannot continue.\n"
#     exit -1
  }

  if {$ifilename != {}} {
    sqlite3 SQL[pid] $ifilename -readonly true
    set SQL SQL[pid]
  }

  set tables [dbGetTables $SQL]
  # Remove 'sqlite_sequence' from the list
  set tables [lsearch -inline -all -not -exact $tables {sqlite_sequence}]
#   puts "<tables:$tables>"

  if {$VERBOSE} {
      puts " -I- database $ifilename"
      puts " -I- tables \[[llength $tables]\]: [lsort $tables]"
  }

  set count 0
  foreach table $tables {
    if {[regexp [format {^%s$} $tableName] $table]} {
      set columns [dbGetTableColumns $SQL $table]
# puts "<columns:$columns>"
      if {[lsearch $tables {headers}] != -1} {
        # The 'headers' table exists
        set header [dbGetTableHeader $SQL $table]
# puts "<header:$header>"
#         # Remove the first 2 columns of the header that match 'id' and 'tag'
#         set header [lrange $header 2 end]
#         # Remove columns 'id' and 'tag' from the list
#         set columns [lsearch -inline -all -not -exact $columns {id}]
#         set columns [lsearch -inline -all -not -exact $columns {tag}]
# puts "<columns:$columns>"
      } else {
        # The 'headers' table does not exist so it is set to the list of table columns
        set header $columns
      }
# puts "matching table '$table'"
# puts "header [llength $header]: $header"
# puts "columns [llength $columns]: $columns"
      set QUERY [format {SELECT %s FROM %s ;} [join $columns ,] $table ]
# puts "<QUERY:$QUERY>"
#       set res [execSQL $SQL $QUERY ]
      set rows [list]
      $SQL eval $QUERY values {
        set row [list]
        foreach el $columns {
          if {[info exists values($el)]} {
            # To test whether a file is "binary", in the sense that it contains NUL bytes
            set isBinary [expr {[string first \x00 $values($el)]>=0}]
            # To test if the value is multi-lines
            if {[llength [split $values($el) \n]] > 1} { set isMultilines 1 } else { set isMultilines 0 }
            if {$isBinary} {
              lappend row {<BINARY>}
            } elseif {$isMultilines} {
              lappend row {<MULTILINES>}
            } else {
              lappend row $values($el)
            }
          } else {
            lappend row {}
          }
        }
        lappend rows $row
#         puts "$values(col0)"
#         parray values
      }

      set CSV [open ${ofilename}.${table}.csv {w}]
      puts $CSV "# Generated on [clock format [clock seconds]]"
      puts $CSV "# Database: [file normalize $ifilename]"
      puts $CSV "# Table: $table"
      puts $CSV "# Records: [llength $rows]"
      puts $CSV [join-csv $header $csvDelimiter]
      foreach row $rows {
        puts $CSV [join-csv $row $csvDelimiter]
      }
      close $CSV
      puts " -I- CSV file [file normalize ${ofilename}.${table}.csv] has been generated"
      incr count
    }
  }

  if {$count == 0} {
    puts " -E- table '$tableName' is not a valid table"
  } else {
    puts " -I- $count CSV file(s) have been generated"
  }

  # Close SQlite database
  $SQL close
  set SQL {}

  return -code ok
}

namespace eval ::tb {
  namespace import ::tb::db2csv::db2csv
}

##-----------------------------------------------------------------------
## GLOBAL VARIABLES
##-----------------------------------------------------------------------

set ::tb::db2csv::VERBOSE 0
set ::tb::db2csv::DEBUG 0

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced
  set QUIET 1
#   error " ERROR - this script is meant to be executed and not sourced.\n"
  if {!$QUIET} { puts " INFO - sourcing [info script]" }
#   ::tb::db2csv::db2csv
} else {
  if {[catch {eval [concat ::tb::db2csv::db2csv $argv]} errorstring]} {
    # Close SQlite database
    catch { if {$::tb::db2csv::SQL != {}} { $::tb::db2csv::SQL close } }
    puts $errorstring
    exit 1
  }
  exit 0
}
