#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2016 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

# proc [file tail [info script]] {} " source [info script]; puts \" [info script] reloaded\" "
# proc reload {} " source [info script]; puts \" [info script] reloaded\" "

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Description:    Constraints summary from XDC or DCP
##
########################################################################################

########################################################################################
## 2016.03.07 - Fixed issue with bus bits reported as constraint
## 2016.01.28 - Ordered XDC files when reading DCP
## 2016.01.26 - Renamed script to report_constraints
##            - Renamed namespace to report_constraints
##            - Added support for -all/-property
## 2016.01.22 - Added support for -dcp
## 2016.01.20 - Added support for 'set_max_delay -datapath_only' as separate constraint
##            - Misc enhancements
## 2016.01.19 - Initial release
########################################################################################

# Example of report:
#      +---------------------------------+
#      | Timing Constraints Summary      |
#      +---------------------+-----------+
#      | Constraint          | step3.xdc |
#      +---------------------+-----------+
#      | create_clock        | 5         |
#      | set_clock_groups    | 3         |
#      | set_input_jitter    | 1         |
#      | set_false_path      | 55        |
#      | set_multicycle_path | 10        |
#      | set_max_delay       | 35        |
#      | set_max_delay (DPO) | 4         |
#      +---------------------+-----------+
#
#   step3.xdc      ->      /wrk/xsjhdnobkup2/dpefour/bugcases/932532/step3.xdc

#      +------------------------+--------------------------------+---------------------------+---------------------------------+
#      | Constraint             | bb200_top_wrapper_late.xdc (0) | bb200_top_wrapper.xdc (1) | bb200_top_wrapper_early.xdc (2) |
#      +------------------------+--------------------------------+---------------------------+---------------------------------+
#      | create_clock           | 0                              | 7                         | 9                               |
#      | create_generated_clock | 0                              | 1                         | 0                               |
#      | set_clock_groups       | 0                              | 2                         | 0                               |
#      | set_input_delay        | 0                              | 2                         | 0                               |
#      | set_output_delay       | 0                              | 2                         | 0                               |
#      | set_case_analysis      | 0                              | 0                         | 15                              |
#      | set_false_path         | 23                             | 5                         | 1435                            |
#      | set_multicycle_path    | 0                              | 8                         | 2                               |
#      | set_max_delay          | 0                              | 3                         | 0                               |
#      | set_max_delay (DPO)    | 158                            | 9                         | 512                             |
#      | set_min_delay          | 0                              | 3                         | 0                               |
#      | set_disable_timing     | 58                             | 0                         | 0                               |
#      +------------------------+--------------------------------+---------------------------+---------------------------------+
#      +---------------------------------------------------------------------------------------------------------------------+
#      | Vivado Commands Summary                                                                                             |
#      +----------------------+--------------------------------+---------------------------+---------------------------------+
#      | Command              | bb200_top_wrapper_late.xdc (0) | bb200_top_wrapper.xdc (1) | bb200_top_wrapper_early.xdc (2) |
#      +----------------------+--------------------------------+---------------------------+---------------------------------+
#      | add_cells_to_pblock  | 0                              | 1                         | 2                               |
#      | all_fanout           | 80                             | 0                         | 0                               |
#      | create_interface     | 0                              | 0                         | 1                               |
#      | create_pblock        | 0                              | 2                         | 2                               |
#      | current_design       | 6659                           | 2168                      | 17138                           |
#      | current_instance     | 174                            | 5                         | 319                             |
#      | filter               | 85                             | 0                         | 0                               |
#      | get_cells            | 304                            | 15                        | 2332                            |
#      | get_clocks           | 0                              | 38                        | 0                               |
#      | get_iobanks          | 2                              | 0                         | 0                               |
#      | get_nets             | 0                              | 12                        | 6                               |
#      | get_pblocks          | 0                              | 3                         | 4                               |
#      | get_pins             | 17                             | 43                        | 1149                            |
#      | get_ports            | 85                             | 1713                      | 74                              |
#      | make_diff_pair_ports | 0                              | 0                         | 1                               |
#      | resize_pblock        | 0                              | 2                         | 2                               |
#      | set_property         | 6663                           | 3868                      | 17233                           |
#      +----------------------+--------------------------------+---------------------------+---------------------------------+


namespace eval ::tb {
#   namespace export -force report_constraints
}

namespace eval ::tb::utils {
  namespace export -force report_constraints
}

namespace eval ::tb::utils::report_constraints {
  namespace export -force report_constraints
  variable version {2016.03.07}
  variable params
  variable output {}
  variable metrics
  array set params [list format {table} verbose 0 debug 0]
  array set metrics [list]
}

proc ::tb::utils::report_constraints::lshift {inputlist} {
  upvar $inputlist argv
  set arg  [lindex $argv 0]
  set argv [lrange $argv 1 end]
  return $arg
}

proc ::tb::utils::report_constraints::report_constraints {args} {
  variable reports
  variable metrics
  variable params
  variable output
  catch {unset metrics}
  catch {unset reports}
  set params(verbose) 0
  set params(debug) 0
  set params(format) {table}
  set currentDesign 0
  set ofilename {}
  set ifilenames {}
  set checkpoint {}
  set filemode {w}
  set returnstring 0
  set format {default}
  set refColumn 0
  set returnstring 0
  set standalone 0
  set reportcommands 0
  set showproperty 0
  set tmpDir {}
  set error 0
  set help 0
  if {([llength $args] == 0) || ($args == {-standalone})} {
    set help 1
  }
  while {[llength $args]} {
    set name [lshift args]
    switch -regexp -- $name {
      {^-cu(r(r(e(n(t(_(d(e(s(i(gn?)?)?)?)?)?)?)?)?)?)?)?$} {
        set currentDesign 1
      }
      {^-f(i(le?)?)?$} {
        set ofilename [lshift args]
      }
      {^-dcp?$} {
        set checkpoint [lshift args]
      }
      {^-csv?$} {
        set params(format) {csv}
      }
      {^-all?$} {
        set reportcommands 1
      }
      {^-pr(o(p(e(r(ty?)?)?)?)?)?$} {
        set showproperty 1
      }
      {^-xdc?$} {
        foreach pattern [lshift args] {
          foreach file [glob -nocomplain $pattern] {
            if {![file exists $file]} {
              puts " -E- File '$file' does not exist"
              incr error
              continue
            }
            lappend ifilenames [file normalize $file]
          }
        }
        set ifilenames [lsort -unique $ifilenames]
      }
      {^-ap(p(e(nd?)?)?)?$} {
        set filemode {a}
      }
      {^-r(e(t(u(r(n(_(s(t(r(i(ng?)?)?)?)?)?)?)?)?)?)?)?$} {
        set returnstring 1
      }
      {^-standalone$} {
        # The script is run in standalone mode
        set standalone 1
      }
      {^-v(e(r(b(o(se?)?)?)?)?)?$} {
        set params(verbose) 1
      }
      {^-d(e(b(ug?)?)?)?$} {
        set params(debug) 1
      }
      {^-h(e(lp?)?)?$} {
        set help 1
      }
      default {
        if {[string match "-*" $name]} {
          puts " -E- option '$name' is not a valid option."
          incr error
        } else {
          foreach file [glob -nocomplain $name] {
            if {![file exists $file]} {
              puts " -E- File '$file' does not exist"
              incr error
              continue
            }
            lappend ifilenames [file normalize $file]
          }
          set ifilenames [lsort -unique $ifilenames]
        }
      }
    }
  }

  if {$help} {
    puts [format {
  Usage: report_constraints
              [<pattern>][-xdc <pattern>]
              [-dcp <checkpoint>]
              [-all][-property]
              [-current_design]
              [-file <filename>]
              [-append]
              [-csv]
              [-return_string]
              [-verbose|-v]
              [-help|-h]

  Description: Constraints summary from XDC or DCP

    Use -all to report all Vivado commands. By default, only
    timing constraints are reported.

    Use -property with -all to show property values used
    with set_property command.

  Example:
     tb::report_constraints -current_design
     tb::report_constraints -xdc '*xdc' -all -return_string
     tb::report_constraints -xdc '*xdc' -csv -file result.csv
     tb::report_constraints -dcp top.dcp -csv -file result.csv
} ]
    # HELP -->
    return -code ok
  }

  if {([llength $ifilenames] == 0) && !$currentDesign && ($checkpoint == {})} {
    puts " -E- no valid input file. Use -xdc to specify XDC(s)"
    incr error
  }

  if {[llength $ifilenames] && ($checkpoint != {})} {
    puts " -E- cannot use -xdc & -dcp together"
    incr error
  }

  if {($ofilename != {}) && $returnstring} {
    puts " -E- cannot use -file & -return_string together"
    incr error
  }

  if {[llength $ifilenames] && $currentDesign} {
    puts " -E- cannot use -current_design & -xdc together"
    incr error
  }

  if {($checkpoint != {}) && $currentDesign} {
    puts " -E- cannot use -current_design & -dcp together"
    incr error
  }

  if {$standalone && $currentDesign} {
    puts " -E- cannot use -current_design in standalone mode"
    incr error
  }

  if {$standalone && $returnstring} {
    puts " -E- cannot use -return_string in standalone mode"
    incr error
  }

  if {$showproperty && !$reportcommands} {
    puts " -W- -property must be used with -all. Command line option ignored"
#     incr error
  }

  if {($checkpoint == {}) && ([llength $ifilenames] == 1)} {
    if {[string tolower [file extension $ifilenames]] == {.dcp}} {
      # In this case, the input file is most likely not an XDC but a DCP
      set checkpoint $ifilenames
      set ifilenames {}
    }
  }

  if {$checkpoint != {}} {
    set checkpoint [file normalize $checkpoint]
    if {![file exists $checkpoint]} {
      puts " -E- checkpoint '$checkpoint' does not exist"
      incr error
    }
  }

  if {$error} {
    error " -E- some error(s) happened. Cannot continue"
  }

  set startTime [clock seconds]
  set output [list]

  if {$currentDesign} {
    # Generate XDC from current design
    set xdc [file normalize [format {write_xdc.%s} [clock seconds]]]
    if {$reportcommands} {
      write_xdc -quiet -file $xdc
    } else {
      write_xdc -quiet -exclude_physical -file $xdc
    }
#     write_xdc -quiet -exclude_physical -file $xdc
    dputs " -D- writing XDC file '$xdc'"
    set ifilenames $xdc
  }

  if {$checkpoint != {}} {
    set tmpDir [file normalize [format {report_constraints.%s} [clock seconds]] ]
    # Extract XDC inside temp directory
    uplevel #0 [list exec unzip $checkpoint *.xdc -d $tmpDir ]
    set ifilenames [lsort [glob -nocomplain $tmpDir/*xdc]]
  }

  if {[catch {

    ########################################################################################
    ##
    ##
    ##
    ########################################################################################

    # All tracked timing constraints
    set timCons [list create_clock \
                      create_generated_clock \
                      set_clock_latency \
                      set_clock_uncertainty \
                      set_clock_groups \
                      set_clock_sense \
                      set_input_jitter \
                      set_system_jitter \
                      set_external_delay \
                      set_input_delay \
                      set_output_delay \
                      set_data_check \
                      set_case_analysis \
                      set_false_path \
                      set_multicycle_path \
                      set_max_delay \
                      set_max_delay_DPO \
                      set_min_delay \
                      group_path \
                      set_disable_timing \
                      set_bus_skew ]
    set allCommands [list]
    set index -1
    set numColumns [llength $ifilenames]
    catch {unset metrics}
    foreach file $ifilenames {
      dputs " -D- Processing $file"
      incr index
      catch {unset commands}
      catch {unset res}
      foreach el $timCons {
        set commands($el) 0
      }
      set res [getVivadoCommands $file $showproperty]
      array set commands $res
      # Save the list of commands used in this XDC
      set allCommands [concat $allCommands [array names commands]]

      foreach el [array names commands] {
        if {$commands($el) != 0} {
          set metrics(${index}:${el}) $commands($el)
        }
      }
    }
    set allCommands [lsort -unique $allCommands]

    ########################################################################################
    ##
    ##
    ##
    ########################################################################################

    set tbl [::Table::Create {Timing Constraints Summary}]
    $tbl indent 1
    set header [list {Constraint}]
    if {$currentDesign} {
      lappend header {<CURRENT_DESIGN>}
    } else {
      set index -1
      foreach file $ifilenames {
        incr index
        lappend header [format {%s (%d)} [file tail $file] $index]
      }
    }
    $tbl header $header
#     $tbl configure -indent 2
    foreach constraint $timCons {
      switch $constraint {
        set_max_delay_DPO {
          # Format name in table
          set row [list {set_max_delay (DPO)}]
        }
        default {
          set row [list $constraint]
        }
      }
#       set row [list $constraint]
      for {set index 0} {$index < $numColumns} {incr index} {
        if {[info exists metrics(${index}:${constraint})]} {
          lappend row $metrics(${index}:${constraint})
        } else {
          lappend row 0
        }
      }
      if {[lsort -unique [lrange $row 1 end]] == {0}} {
        # If none of the XDC have this constraint, then skip it:
        # Eg: row = {set_clock_groups 0 0 0 0}
        continue
      }
      $tbl addrow $row
    }

#     set output [concat $output [split [$tbl export -format $params(format)] \n] ]
    switch $params(format) {
      table {
        set output [concat $output [split [$tbl print] \n] ]
      }
      csv {
        set output [concat $output [split [$tbl csv] \n] ]
        if {$ofilename != {}} {
          # Append a comment out version of the table
          foreach line [split [$tbl print] \n] {
            lappend output [format {#  %s} $line]
          }
        }
      }
    }
    catch {$tbl destroy}

    ########################################################################################
    ##
    ##
    ##
    ########################################################################################

    if {$reportcommands} {
      set tbl [::Table::Create {Vivado Commands Summary}]
      $tbl indent 1
      set header [list {Command}]
      if {$currentDesign} {
        lappend header {<CURRENT_DESIGN>}
      } else {
        set index -1
        foreach file $ifilenames {
          incr index
          lappend header [format {%s (%d)} [file tail $file] $index]
        }
      }
      $tbl header $header
#       $tbl configure -indent 2
      foreach command $allCommands {
        if {[lsearch $timCons $command] != -1} {
          # Skip timing reconstraints since they have already been reported
          continue
        }
        set row [list $command]
        for {set index 0} {$index < $numColumns} {incr index} {
          if {[info exists metrics(${index}:${command})]} {
            lappend row $metrics(${index}:${command})
          } else {
            lappend row 0
          }
        }
        if {[lsort -unique [lrange $row 1 end]] == {0}} {
          # If none of the XDC have this constraint, then skip it:
          # Eg: row = {set_clock_groups 0 0 0 0}
          continue
        }
        $tbl addrow $row
      }

#       set output [concat $output [split [$tbl export -format $params(format)] \n] ]
      switch $params(format) {
        table {
          set output [concat $output [split [$tbl print] \n] ]
        }
        csv {
          set output [concat $output [split [$tbl csv] \n] ]
          if {$ofilename != {}} {
            # Append a comment out version of the table
            foreach line [split [$tbl print] \n] {
              lappend output [format {#  %s} $line]
            }
          }
        }
      }
      catch {$tbl destroy}
    }

    ########################################################################################
    ##
    ##
    ##
    ########################################################################################

    if {$currentDesign} {
      # When -current_design has been used, do not generate the footer
      # with the filename
    } elseif {($checkpoint != {}) && !$params(debug)} {
      # When -dcp has been used but not -debug, do not generate
      # the footer with the filename
    } else {
      set prefix {}
      if {($params(format) == {csv}) || ($ofilename != {})} {
        # Comment out lines when writting into a file
        set prefix {# }
      }
      lappend output {}
      set index -1
      foreach file $ifilenames {
        incr index
        lappend output [format "%s  %s (%d) \t -> \t %s" $prefix [file tail $file] $index $file]
      }
    }

    ########################################################################################
    ##
    ##
    ##
    ########################################################################################

  } errorstring]} {
    puts " -E- $errorstring"
  }

  if {$currentDesign} {
    if {!$params(debug)} {
      # Keep the file in debug mode
      file delete $ifilenames
    }
  }

  if {$checkpoint != {}} {
    if {!$params(debug)} {
      # Keep the temp directory in debug mode
      if {$tmpDir != {}} { file delete -force $tmpDir }
    }
  }

  if {$params(debug)} {
  }

  set stopTime [clock seconds]
#   puts " -I- report_constraints completed in [expr $stopTime - $startTime] seconds"

  if {$ofilename != {}} {
    set FH [open $ofilename $filemode]
    puts $FH "# ---------------------------------------------------------------------------------"
    puts $FH [format {# Created on %s with report_constraints (%s)} [clock format [clock seconds]] $::tb::utils::report_constraints::version ]
    puts $FH "# ---------------------------------------------------------------------------------\n"
    puts $FH [join $output \n]
    close $FH
    puts " -I- Generated file [file normalize $ofilename]"
    return -code ok
  }

  if {$returnstring} {
    return [join $output \n]
  } else {
    puts [join $output \n]
  }
  return -code ok
}

########################################################################################
##
##
##
########################################################################################
proc ::tb::utils::report_constraints::presort_list {l1 l2} {
  set l [list]
  foreach el $l1 {
    if {[lsearch $l2 $el] != -1} {
      lappend l $el
    }
  }
  foreach el $l2 {
    if {[lsearch $l $el] == -1} {
      lappend l $el
    }
  }
  return $l
}

proc ::tb::utils::report_constraints::dputs {args} {
  variable params
  if {$params(debug)} {
    eval [concat puts $args]
  }
  return -code ok
}

# Generate a list of integers
proc ::tb::utils::report_constraints::iota {from to} {
  set out [list]
  if {$from <= $to} {
    for {set i $from} {$i <= $to} {incr i}    {lappend out $i}
  } else {
    for {set i $from} {$i >= $to} {incr i -1} {lappend out $i}
  }
  return $out
}

# Return a list of Vivado commands used in a Tcl script.
# Format: <command> <number>
# For example:
#   get_nets 35 get_pins 242 set_false_path 162 set_multicycle_path 66 \
#   create_generated_clock 67 set_clock_groups 292 current_instance 10 \
#   set_case_analysis 15 get_cells 191 get_clocks 717 get_ports 26 create_clock 12

proc ::tb::utils::report_constraints::getVivadoCommands {filename {showproperty 0}} {
  set slave [interp create]
  $slave eval [format {
    catch {unset commands}
    global commands
    global showproperty
    set showproperty %s

    proc unknown {args} {
      global commands
      global showproperty
      set cmd [lindex $args 0]
      if {[regexp {^[0-9]+$} $cmd]} {
        return -code ok
      }
      if {($cmd == {set_max_delay}) && ([lsearch -exact $args {-datapath_only}] != -1)} {
        set cmd {set_max_delay_DPO}
      } elseif {($cmd == {set_max_delay}) && ([lsearch -regexp $args {-datapath}] != -1)} {
        set cmd {set_max_delay_DPO}
      }
      if {$cmd == {set_property}} {
        set value [lindex $args 1]
        if {$value == {-quiet}} { set value [lindex $args 2] }
#         if {($value == {-dict}) || ($value == {-dictionary})} { set value [lindex $args 3] }
        # Skip properties SRC_FILE_INFO and src_info
        if {($value == {SRC_FILE_INFO}) || ($value == {src_info})} {
          return -code ok
        }
        # If the command is set_property, then save the property value as well.
        # For example:
        #   set_property (CLOCK_DEDICATED_ROUTE)
        #   set_property (USER_CLOCK_ROOT)
        if {$showproperty} {
          # Show property value
          set cmd "${cmd} (${value})"
        } else {
          # Hide the property value
        }
      }
      if {![info exists commands($cmd)]} {
        set commands($cmd) 0
      }
      incr commands($cmd)
      return -code ok
    }

    source %s
  } $showproperty $filename ]

  set result [$slave eval array get commands]
  interp delete $slave
  return $result
}

namespace eval ::tb::utils {
  namespace import -force ::tb::utils::report_constraints::report_constraints
}

namespace eval ::tb {
  namespace import -force ::tb::utils::report_constraints
}

###########################################################################
##
## Simple package to Handle printing of tables
##
## %> set tbl [Table::Create {this is my title}]
## %> $tbl header [list "name" "#Pins" "case_value" "user_case_value"]
## %> $tbl addrow [list A/B/C/D/E/F 12 - -]
## %> $tbl addrow [list A/B/C/D/E/F 24 1 -]
## %> $tbl separator
## %> $tbl addrow [list A/B/C/D/E/F 48 0 1]
## %> $tbl indent 0
## %> $tbl print
## +-------------+-------+------------+-----------------+
## | name        | #Pins | case_value | user_case_value |
## +-------------+-------+------------+-----------------+
## | A/B/C/D/E/F | 12    | -          | -               |
## | A/B/C/D/E/F | 24    | 1          | -               |
## +-------------+-------+------------+-----------------+
## | A/B/C/D/E/F | 48    | 0          | 1               |
## +-------------+-------+------------+-----------------+
## %> $tbl indent 2
## %> $tbl print
##   +-------------+-------+------------+-----------------+
##   | name        | #Pins | case_value | user_case_value |
##   +-------------+-------+------------+-----------------+
##   | A/B/C/D/E/F | 12    | -          | -               |
##   | A/B/C/D/E/F | 24    | 1          | -               |
##   +-------------+-------+------------+-----------------+
##   | A/B/C/D/E/F | 48    | 0          | 1               |
##   +-------------+-------+------------+-----------------+
## %> $tbl sort {-index 1 -increasing} {-index 2 -dictionary}
## %> $tbl print
## %> $tbl destroy
##
###########################################################################

# namespace eval Table { set n 0 }

# Trick to silence the linter
eval [list namespace eval ::Table {
  set n 0
} ]

proc ::Table::Create { {title {}} } { #-- constructor
  # Summary :
  # Argument Usage:
  # Return Value:

  variable n
  set instance [namespace current]::[incr n]
  namespace eval $instance { variable tbl [list]; variable header [list]; variable indent 0; variable title {}; variable numrows 0 }
  interp alias {} $instance {} ::Table::do $instance
  # Set the title
  $instance title $title
  set instance
}

proc ::Table::do {self method args} { #-- Dispatcher with methods
  # Summary :
  # Argument Usage:
  # Return Value:

  upvar #0 ${self}::tbl tbl
  upvar #0 ${self}::header header
  upvar #0 ${self}::numrows numrows
  switch -- $method {
      header {
        set header [lindex $args 0]
        return 0
      }
      addrow {
        eval lappend tbl $args
        incr numrows
        return 0
      }
      separator {
        eval lappend tbl {%%SEPARATOR%%}
        return 0
      }
      title {
        set ${self}::title [lindex $args 0]
        return 0
      }
      indent {
        set ${self}::indent $args
        return 0
      }
      print {
        eval ::Table::print $self
      }
      csv {
        eval ::Table::printcsv $self
      }
      length {
        return $numrows
      }
      sort {
        # Each argument is a list of: <lsort arguments>
        set command {}
        while {[llength $args]} {
          if {$command == {}} {
            set command "lsort [[namespace parent]::lshift args] \$tbl"
          } else {
            set command "lsort [[namespace parent]::lshift args] \[$command\]"
          }
        }
        if {[catch { set tbl [eval $command] } errorstring]} {
          puts " -E- $errorstring"
        } else {
        }
      }
      reset {
        set ${self}::tbl [list]
        set ${self}::header [list]
        set ${self}::indent 0
        set ${self}::title {}
        return 0
      }
      destroy {
        set ${self}::tbl [list]
        set ${self}::header [list]
        set ${self}::indent 0
        set ${self}::title {}
        namespace delete $self
        return 0
      }
      default {error "unknown method $method"}
  }
}

proc ::Table::print {self} {
   upvar #0 ${self}::tbl table
   upvar #0 ${self}::header header
   upvar #0 ${self}::indent indent
   upvar #0 ${self}::title title
   set maxs {}
   foreach item $header {
       lappend maxs [string length $item]
   }
   set numCols [llength $header]
   foreach row $table {
       if {$row eq {%%SEPARATOR%%}} { continue }
       for {set j 0} {$j<$numCols} {incr j} {
            set item [lindex $row $j]
            set max [lindex $maxs $j]
            if {[string length $item]>$max} {
               lset maxs $j [string length $item]
           }
       }
   }
  set head " [string repeat " " [expr $indent * 4]]+"
  foreach max $maxs {append head -[string repeat - $max]-+}

  # Generate the title
  if {$title ne {}} {
    # The upper separator should something like +----...----+
    append res " [string repeat " " [expr $indent * 4]]+[string repeat - [expr [string length [string trim $head]] -2]]+\n"
    # Suports multi-lines title
    foreach line [split $title \n] {
      append res " [string repeat " " [expr $indent * 4]]| "
      append res [format "%-[expr [string length [string trim $head]] -4]s" $line]
      append res " |\n"
    }
  }

  # Generate the table header
  append res $head\n
  # Generate the table rows
  set first 1
  set numsep 0
  foreach row [concat [list $header] $table] {
      if {$row eq {%%SEPARATOR%%}} {
        incr numsep
        if {$numsep == 1} { append res $head\n }
        continue
      } else {
        set numsep 0
      }
      append res " [string repeat " " [expr $indent * 4]]|"
      foreach item $row max $maxs {append res [format " %-${max}s |" $item]}
      append res \n
      if {$first} {
        append res $head\n
        set first 0
        incr numsep
      }
  }
  append res $head
  set res
}

proc ::Table::printcsv {self args} {
  upvar #0 ${self}::tbl table
  upvar #0 ${self}::header header
  upvar #0 ${self}::title title

  array set defaults [list \
      -delimiter {,} \
    ]
  array set options [array get defaults]
  array set options $args
  set sepChar $options(-delimiter)

  set res {}
  # Support for multi-lines title
  set first 1
  foreach line [split $title \n] {
    if {$first} {
      set first 0
      append res "# title${sepChar}[::Table::list2csv [list $line] $sepChar]\n"
    } else {
      append res "#      ${sepChar}[::Table::list2csv [list $line] $sepChar]\n"
    }
  }
  append res "[::Table::list2csv $header $sepChar]\n"
  set count 0
  set numsep 0
  foreach row $table {
    incr count
    if {$row eq {%%SEPARATOR%%}} {
      incr numsep
      if {$numsep == 1} {
        append res "# [::Table::list2csv {++++++++++++++++++++++++++++++++++++++++++++++++++} $sepChar]\n"
      } else {
        set numsep 0
      }
      continue
    }
    append res "[::Table::list2csv $row $sepChar]\n"
  }
  return $res
}

proc ::Table::list2csv { list {sepChar ,} } {
  set out ""
  set sep {}
  foreach val $list {
    if {[string match "*\[\"$sepChar\]*" $val]} {
      append out $sep\"[string map [list \" \"\"] $val]\"
    } else {
      append out $sep\"$val\"
    }
    set sep $sepChar
  }
  return $out
}

########################################################################################
##
##
##
########################################################################################

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced
} else {
  if {[catch {eval [concat ::tb::utils::report_constraints::report_constraints -standalone $argv]} errorstring]} {
    puts $errorstring
    exit 1
  }
  exit 0
}
