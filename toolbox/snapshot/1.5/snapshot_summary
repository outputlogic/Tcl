#!/bin/sh
# use -*-TCL-*- \
exec tclsh "$0" "$@"

####################################################################################################
# HEADER_BEGIN
# COPYRIGHT NOTICE
# Copyright 2001-2016 Xilinx Inc. All Rights Reserved.
# http://www.xilinx.com/support
# HEADER_END
####################################################################################################

########################################################################################
##
## Company:        Xilinx, Inc.
## Created by:     David Pefourque
##
## Version:        2016.01.12
## Description:    Example script to extract summary report from snapshot database
##
########################################################################################

########################################################################################
## 2016.01.12 - Improved the extraction of the congestion from database
## 2015.12.17 - Reformatted the script so that it can be used standalone or as a
##              plugin to the command 'snapshot'
##            - Added support for -lean for lean table
## 2015.10.15 - Renamed congestion column: 'Congestion' -> 'N-S-E-W'
## 2015.10.01 - Added -show_congestion to report placer/router congestion
## 2015.05.08 - Removed the first 'Directive' column and removed formatting for
##              column 'Experiment'
## 2015.04.19 - Added -show_directive to report directive for all steps
##            - Renamed -show_all_hold as -show_hold
## 2015.02.27 - Added -show_all_hold to report WHS/THS for all steps
## 2014.12.17 - Added ability to add additional metrics to the summary table. Adding
##              extra metrics requires hardcoding some code inside this script but it
##              should be easier to do with those changes.
## 2014.12.16 - Fixed sorting column number for post-route WNS
## 2014.12.12 - Fixed minor issue with wrong column being displayed for route_design
##              runtime
## 2014.12.09 - Hide rows related to flow steps that have no snapshot inside database
## 2014.12.05 - Added support for synth_design/opt_design
## 2014.12.03 - Fixed display issue when some of the snapshot parameters are empty
## 2014.10.28 - Added support for specifying multiple snapshot databases at the same time
##            - Added iterations over all the projects/versions/releases in the
##              database
##            - Added the project/version/release columns to the output report
## 2014.10.24 - Open the sqlite database in memory
## 2014.10.16 - Added total runtime to the summary table
## 2014.10.09 - Added command line option -runtime
##            - Fixed issue when post-route snapshots were not showing
## 2014.10.04 - Added support for post-route phys_opt_design
##            - Added the number of phys_opt_design iterations in the table
##            - Added command line options -sort_by_wns and -save
##            - Fixed alignment issue when some snapshots are missing
##            - Fixed misc issues
## 2014.09.26 - Initial release
########################################################################################

# Sample report:
# % snapshot summary metrics.db -show_all_hold -show_directive -show_congestion -runtime
# % snapshot_summary metrics.db -show_all_hold -show_directive -show_congestion -runtime

#   | Project | Version | Release | Experiment     | Total Runtime          | Step         | Directive              | WNS    | TNS       | #     | WHS    | THS      | #    | N-S-E-W | Runtime              | Step            | Directive                                                  | Iter | WNS    | TNS      | #    | WHS    | THS      | #    | N-S-E-W | Runtime               | Step         | Directive | WNS    | TNS       | #     | WHS   | THS   | # | Overlaps | N-S-E-W | Runtime               | Step            | Directive | WNS    | TNS       | #     | WHS   | THS   | # | N-S-E-W | Runtime               |

#   | compass | 0811    | 2015.3  | impl_4.pblocks | 11 hrs 13 mins 32 secs | place_design | AltWLDrivenPlacement   | -0.892 | -2981.538 | 10416 | -0.411 | -356.616 | 9457 | 4-5-3-2 | 1 hr 9 mins 40 secs  | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.592 | -865.150 | 4963 | -0.411 | -356.300 | 9455 | 4-5-3-2 | 5 hrs 4 mins 40 secs  | route_design | Explore   | -0.654 | -3948.377 | 21737 | 0.013 | 0.000 | 0 | 0        | 1-0-1-0 | 3 hrs 24 mins 43 secs | phys_opt_design | Default   | -0.567 | -3802.873 | 21358 | 0.013 | 0.000 | 0 | 1-0-1-0 | 1 hr 34 mins 29 secs  |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 7 hrs 14 mins 29 secs  | place_design | Default                | -0.942 | -1026.100 | 4997  | -0.430 | -316.714 | 7802 | 4-5-4-4 | 50 mins 32 secs      | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.718 | -399.572 | 2866 | -0.430 | -316.672 | 7799 | 4-5-4-4 | 3 hrs 22 mins 1 sec   | route_design | Explore   | -0.679 | -3181.998 | 18620 | 0.016 | 0.000 | 0 | 0        | 2-0-1-1 | 2 hrs 32 mins         | phys_opt_design | Default   | -0.679 | -3181.998 | 18620 | 0.016 | 0.000 | 0 | 2-0-1-1 | 29 mins 56 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 12 hrs 9 mins 14 secs  | place_design | Explore                | -0.942 | -988.824  | 4892  | -0.430 | -316.699 | 7802 | 4-5-4-4 | 1 hr 17 mins 52 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.718 | -420.178 | 3004 | -0.430 | -316.657 | 7799 | 4-5-4-4 | 4 hrs 17 mins 14 secs | route_design | Explore   | -0.682 | -3282.512 | 18742 | 0.016 | 0.000 | 0 | 0        | 2-0-1-1 | 5 hrs 47 mins 12 secs | phys_opt_design | Default   | -0.682 | -3282.512 | 18742 | 0.016 | 0.000 | 0 | 2-0-1-1 | 46 mins 56 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 14 hrs 53 mins 40 secs | place_design | ExtraNetDelay_high     | -0.780 | -850.585  | 4510  | -0.692 | -281.410 | 7204 | 4-5-2-3 | 1 hr 53 mins 47 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.499 | -250.015 | 2135 | -0.692 | -281.411 | 7204 | 4-5-2-3 | 5 hrs 6 mins 49 secs  | route_design | Explore   | -0.451 | -1278.541 | 11035 | 0.016 | 0.000 | 0 | 0        | 2-0-0-1 | 6 hrs 55 mins 4 secs  | phys_opt_design | Default   | -0.450 | -1277.761 | 11037 | 0.016 | 0.000 | 0 | 2-0-0-1 | 58 mins               |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 15 hrs 10 mins 6 secs  | place_design | ExtraNetDelay_low      | -0.639 | -286.780  | 1969  | -0.467 | -328.300 | 8206 | 4-5-4-3 | 1 hr 16 mins 10 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.382 | -58.348  | 757  | -0.467 | -328.297 | 8206 | 4-5-4-3 | 4 hrs 30 mins 4 secs  | route_design | Explore   | -0.235 | -126.886  | 2439  | 0.009 | 0.000 | 0 | 0        | 1-0-1-1 | 7 hrs 3 mins 6 secs   | phys_opt_design | Default   | -0.179 | -125.229  | 2433  | 0.009 | 0.000 | 0 | 1-0-1-1 | 2 hrs 20 mins 46 secs |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 11 hrs 58 mins 9 secs  | place_design | ExtraNetDelay_medium   | -0.517 | -458.623  | 3404  | -0.474 | -307.277 | 7534 | 4-5-3-3 | 1 hr 25 mins 5 secs  | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.443 | -182.414 | 1855 | -0.474 | -307.277 | 7534 | 4-5-3-3 | 4 hrs 24 mins 31 secs | route_design | Explore   | -0.388 | -862.323  | 8675  | 0.016 | 0.000 | 0 | 0        | 2-0-0-0 | 5 hrs 7 mins 39 secs  | phys_opt_design | Default   | -0.379 | -862.158  | 8673  | 0.016 | 0.000 | 0 | 2-0-0-0 | 1 hr 54 secs          |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 12 hrs 54 mins 7 secs  | place_design | ExtraPostPlacementOpt  | -0.782 | -474.883  | 3155  | -0.430 | -316.631 | 7794 | 4-6-4-4 | 1 hr 43 mins 17 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.652 | -188.133 | 1743 | -0.430 | -316.617 | 7793 | 4-6-4-4 | 4 hrs 16 mins 36 secs | route_design | Explore   | -0.609 | -2430.333 | 15778 | 0.016 | 0.000 | 0 | 0        | 2-0-1-0 | 6 hrs 12 mins 43 secs | phys_opt_design | Default   | -0.596 | -2430.320 | 15778 | 0.016 | 0.000 | 0 | 2-0-1-0 | 41 mins 31 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 11 hrs 15 mins 38 secs | place_design | LateBlockPlacement     | -0.942 | -1026.100 | 4997  | -0.430 | -316.714 | 7802 | 4-5-4-4 | 1 hr 17 mins 46 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.718 | -399.572 | 2866 | -0.430 | -316.672 | 7799 | 4-5-4-4 | 4 hrs 23 mins 6 secs  | route_design | Explore   | -0.679 | -3181.998 | 18620 | 0.016 | 0.000 | 0 | 0        | 2-0-1-1 | 4 hrs 46 mins 1 sec   | phys_opt_design | Default   | -0.679 | -3181.998 | 18620 | 0.016 | 0.000 | 0 | 2-0-1-1 | 48 mins 45 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 10 hrs 13 mins 32 secs | place_design | SSI_BalanceSLLs        | -0.553 | -789.910  | 4740  | -0.417 | -316.166 | 7822 | 4-5-4-4 | 58 mins 59 secs      | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.481 | -202.862 | 1781 | -0.417 | -316.229 | 7827 | 4-5-4-4 | 4 hrs 48 mins 49 secs | route_design | Explore   | -0.626 | -2950.238 | 17370 | 0.016 | 0.000 | 0 | 0        | 2-0-1-0 | 2 hrs 47 mins 13 secs | phys_opt_design | Default   | -0.595 | -2912.298 | 17259 | 0.016 | 0.000 | 0 | 2-0-1-0 | 1 hr 38 mins 31 secs  |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 10 hrs 23 mins 41 secs | place_design | SSI_BalanceSLRs        | -0.599 | -855.505  | 4935  | -0.417 | -316.207 | 7824 | 4-5-4-4 | 55 mins 16 secs      | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.481 | -208.754 | 1859 | -0.417 | -316.316 | 7830 | 4-5-4-4 | 5 hrs 26 secs         | route_design | Explore   | -0.382 | -1071.055 | 11147 | 0.016 | 0.000 | 0 | 0        | 2-0-0-1 | 3 hrs 44 mins 30 secs | phys_opt_design | Default   | -0.382 | -1071.054 | 11147 | 0.016 | 0.000 | 0 | 2-0-0-1 | 43 mins 29 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 7 hrs 45 mins 31 secs  | place_design | SSI_ExtraTimingOpt     | -0.737 | -496.181  | 3343  | -0.430 | -316.523 | 7794 | 4-6-4-4 | 1 hr 11 mins 44 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.737 | -229.574 | 1958 | -0.430 | -316.493 | 7792 | 4-6-4-4 | 3 hrs 6 mins 16 secs  | route_design | Explore   | -0.684 | -2779.242 | 17149 | 0.016 | 0.000 | 0 | 0        | 2-0-0-0 | 2 hrs 53 mins 49 secs | phys_opt_design | Default   | -0.680 | -2779.237 | 17148 | 0.016 | 0.000 | 0 | 2-0-0-0 | 33 mins 42 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 9 hrs 24 mins 2 secs   | place_design | SSI_HighUtilSLRs       | -0.402 | -280.639  | 2468  | -0.510 | -288.248 | 7302 | 5-5-4-3 | 1 hr 2 mins 15 secs  | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.258 | -18.624  | 329  | -0.510 | -288.281 | 7304 | 5-5-4-3 | 4 hrs 8 mins 5 secs   | route_design | Explore   | -0.565 | -2010.111 | 13586 | 0.016 | 0.000 | 0 | 0        | 2-1-0-0 | 3 hrs 9 mins 3 secs   | phys_opt_design | Default   | -0.551 | -1923.639 | 13367 | 0.016 | 0.000 | 0 | 2-1-0-0 | 1 hr 4 mins 39 secs   |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 9 hrs 1 min 45 secs    | place_design | SSI_SpreadSLLs         | -0.506 | -358.766  | 3170  | -0.478 | -375.837 | 8670 | 5-5-3-3 | 57 mins 11 secs      | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.506 | -91.220  | 1175 | -0.478 | -375.832 | 8672 | 5-5-3-3 | 3 hrs 22 mins 58 secs | route_design | Explore   | -0.399 | -1055.421 | 10822 | 0.000 | 0.000 | 0 | 0        | 0-1-0-1 | 4 hrs 11 mins 44 secs | phys_opt_design | Default   | -0.390 | -1055.394 | 10820 | 0.000 | 0.000 | 0 | 0-1-0-1 | 29 mins 52 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 7 hrs 5 mins 20 secs   | place_design | SpreadLogic_high       | -0.737 | -496.181  | 3343  | -0.430 | -316.523 | 7794 | 4-6-4-4 | 1 hr 7 mins 36 secs  | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.737 | -229.574 | 1958 | -0.430 | -316.493 | 7792 | 4-6-4-4 | 2 hrs 54 mins 50 secs | route_design | Explore   | -0.684 | -2779.242 | 17149 | 0.016 | 0.000 | 0 | 0        | 2-0-0-0 | 2 hrs 31 mins 55 secs | phys_opt_design | Default   | -0.680 | -2779.237 | 17148 | 0.016 | 0.000 | 0 | 2-0-0-0 | 30 mins 59 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 7 hrs 18 mins 24 secs  | place_design | SpreadLogic_low        | -0.737 | -496.181  | 3343  | -0.430 | -316.523 | 7794 | 4-6-4-4 | 1 hr 13 mins 3 secs  | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.737 | -229.574 | 1958 | -0.430 | -316.493 | 7792 | 4-6-4-4 | 2 hrs 59 mins 14 secs | route_design | Explore   | -0.684 | -2779.242 | 17149 | 0.016 | 0.000 | 0 | 0        | 2-0-0-0 | 2 hrs 35 mins 4 secs  | phys_opt_design | Default   | -0.680 | -2779.237 | 17148 | 0.016 | 0.000 | 0 | 2-0-0-0 | 31 mins 3 secs        |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 7 hrs 18 mins 7 secs   | place_design | SpreadLogic_medium     | -0.737 | -496.181  | 3343  | -0.430 | -316.523 | 7794 | 4-6-4-4 | 1 hr 13 mins 12 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.737 | -229.574 | 1958 | -0.430 | -316.493 | 7792 | 4-6-4-4 | 3 hrs 6 secs          | route_design | Explore   | -0.684 | -2779.242 | 17149 | 0.016 | 0.000 | 0 | 0        | 2-0-0-0 | 2 hrs 34 mins 7 secs  | phys_opt_design | Default   | -0.680 | -2779.237 | 17148 | 0.016 | 0.000 | 0 | 2-0-0-0 | 30 mins 42 secs       |
#   | compass | 0811    | 2015.3  | impl_4.pblocks | 7 hrs 19 mins 10 secs  | place_design | WLDrivenBlockPlacement | -0.737 | -496.181  | 3343  | -0.430 | -316.523 | 7794 | 4-6-4-4 | 1 hr 11 mins 36 secs | phys_opt_design | AggressiveExplore AggressiveFanoutOpt AlternateReplication | 3    | -0.737 | -229.574 | 1958 | -0.430 | -316.493 | 7792 | 4-6-4-4 | 2 hrs 59 mins 54 secs | route_design | Explore   | -0.684 | -2779.242 | 17149 | 0.016 | 0.000 | 0 | 0        | 2-0-0-0 | 2 hrs 35 mins 25 secs | phys_opt_design | Default   | -0.680 | -2779.237 | 17148 | 0.016 | 0.000 | 0 | 2-0-0-0 | 32 mins 15 secs       |


# Safely create namspaces
namespace eval ::tb {
}
namespace eval ::tb::snapshot {
}

#------------------------------------------------------------------------
# ::tb::snapshot::method:summary
#------------------------------------------------------------------------
# Usage: snapshot summary [<options>]
#------------------------------------------------------------------------
# Generate a timing summary table and CSV
#------------------------------------------------------------------------
proc ::tb::snapshot::method:summary { args } {
  # Summary :
  # Argument Usage:
  # Return Value:

  # Generate a timing summary table and CSV (-help)
  return [uplevel [concat ::tb::snapshot::summary $args]]
}

#------------------------------------------------------------------------
# ::tb::snapshot::summary
#------------------------------------------------------------------------
# Usage: ::tb::snapshot::summary [<options>]
#------------------------------------------------------------------------
# Generate a timing summary table and CSV
#------------------------------------------------------------------------
proc ::tb::snapshot::summary {args} {
  # Summary :
  # Argument Usage:
  # Return Value:

  variable params
  variable verbose
  variable debug

  proc progressBar {cur tot {indent {}}} {
    # http://wiki.tcl.tk/16939
    # if you don't want to redraw all the time, uncomment and change ferquency
    #if {$cur % ($tot/300)} { return }
    # set to total width of progress bar
    set total 76

    # Do not show the progress bar in GUI and Batch modes
    catch { if {$rdi::mode != {tcl}} { return } }

    set half [expr {$total/2}]
    set percent [expr {100.*$cur/$tot}]
    set val (\ [format "%6.2f%%" $percent]\ )
    set str "|[string repeat = [expr {round($percent*$total/100)}]][string repeat { } [expr {$total-round($percent*$total/100)}]]|"
    set str "[string range $str 0 $half]$val[string range $str [expr {$half+[string length $val]-1}] end]"
    puts -nonewline stderr "\r${indent}${str}"
  }

  # Convert duration string such as '1 hr 7 mins 47 secs' to seconds
  proc duration2seconds { string } {
    set seconds 0
    # If the input string is already formated as an integer, then return the number as-is
    if {[regexp {^[0-9]+$} $string]} { return $string }
    if {$string == {}} { return {} }
    foreach mult {86400 3600 60 1} name {day hr min sec} {
      if {[regexp [format {([0-9]+)\s*%s} $name] $string - t]} {
        set seconds [expr $seconds + $mult * $t]
      }
    }
    return $seconds
  }

  # Generate a list of integers
  proc iota {from to} {
    set out [list]
    if {$from <= $to} {
      for {set i $from} {$i <= $to} {incr i}    {lappend out $i}
    } else {
      for {set i $from} {$i >= $to} {incr i -1} {lappend out $i}
    }
    return $out
  }

  # Flatten a list
  proc lflatten {data} {
      while { $data != [set data [join $data]] } { }
      return $data
  }

  proc get_snapshot_info {project version release experiment step} {
    # Array for optional extra metrics
    catch {unset metrics}
    set id [::tb::get_snapshot_ids -project $project -version $version -release $release -experiment $experiment -step $step]
    # It should not happens unless same databases are merged multiple times, but what should happens
    # when multiple snapshot ids are being found
    if {[llength $id]>1} {
      puts " -W- Found multiple equivalent snapshots: $id (project:$project / version:$version / release:$release / experiment:$experiment / step:$step)"
      # Keep id from last snapshot
      set id [lindex $id end]
      puts " -W- Kept last snapshot id: $id"
    }
    if {$id == {}} { return [list {} {} {} {} {} {} {} {}] }
    set directive [::tb::get_metric_values -quiet -ids [::tb::get_metric_ids -ids $id -glob {directive}]]
    if {$directive == [list {}]} { set directive {} }
    set wns [::tb::get_metric_values -ids [::tb::get_metric_ids -ids $id -glob {report.timing_summary.wns}]]
    set tns [::tb::get_metric_values -ids [::tb::get_metric_ids -ids $id -glob {report.timing_summary.tns}]]
    set tnsFailing [::tb::get_metric_values -ids [::tb::get_metric_ids -ids $id -glob {report.timing_summary.tns.failing}]]
    set whs [::tb::get_metric_values -ids [::tb::get_metric_ids -ids $id -glob {report.timing_summary.whs}]]
    set ths [::tb::get_metric_values -ids [::tb::get_metric_ids -ids $id -glob {report.timing_summary.ths}]]
    set thsFailing [::tb::get_metric_values -ids [::tb::get_metric_ids -ids $id -glob {report.timing_summary.ths.failing}]]
    set overlaps [::tb::get_metric_values -ids [::tb::get_metric_ids -ids $id -glob {report.route_status.errors}]]
    set duration [::tb::get_metric_values -quiet -ids [::tb::get_metric_ids -ids $id -glob {duration}]]
    if {($duration == {}) || ($duration == [list {}])} { set duration 0 }

#     # Example of extra metrics being extracted:
#     # +----------------------------+--------+-------+-----------+-------+
#     # |          Site Type         |  Used  | Fixed | Available | Util% |
#     # +----------------------------+--------+-------+-----------+-------+
#     # | CLB LUTs                   | 291167 |     0 |    537600 | 54.16 |
#     # |   LUT as Logic             | 259342 |     0 |    537600 | 48.24 |
#     # |   LUT as Memory            |  31825 |     0 |     76800 | 41.43 |
#     # |     LUT as Distributed RAM |  24458 |     0 |           |       |
#     # |     LUT as Shift Register  |   7367 |     0 |           |       |
#     # | CLB Registers              | 433322 |     0 |   1075200 | 40.30 |
#     # |   Register as Flip Flop    | 433322 |     0 |   1075200 | 40.30 |
#     # |   Register as Latch        |      0 |     0 |   1075200 |  0.00 |
#     # | CARRY8                     |   2833 |     0 |     67200 |  4.21 |
#     # | F7 Muxes                   |   7776 |     0 |    268800 |  2.89 |
#     # | F8 Muxes                   |    111 |     0 |    134400 |  0.08 |
#     # | F9 Muxes                   |      0 |     0 |     67200 |  0.00 |
#     # +----------------------------+--------+-------+-----------+-------+
#     set report_utilization [::tb::get_metric_values -quiet -ids [::tb::get_metric_ids -ids $id -glob {report.utilization}]]
#     # Extract values from report_utilization
#     regexp -nocase -- {LUT as Logic\s*\|\s*([\.0-9]+)\s*\|} $report_utilization -- metrics(lut_as_logic)
#     regexp -nocase -- {LUT as Memory\s*\|\s*([\.0-9]+)\s*\|} $report_utilization -- metrics(lut_as_memory)
#     regexp -nocase -- {LUT as Distributed RAM\s*\|\s*([\.0-9]+)\s*\|} $report_utilization -- metrics(lut_as_distributed_ram)
#     regexp -nocase -- {LUT as Shift Register\s*\|\s*([\.0-9]+)\s*\|} $report_utilization -- metrics(lut_as_shift_register)
#     regexp -nocase -- {Register as Flip Flop\s*\|\s*([\.0-9]+)\s*\|} $report_utilization -- metrics(lut_as_flip_flop)

    set congestion [::tb::get_metric_values -quiet -ids [::tb::get_metric_ids -ids $id -glob {report.design_analysis.congestion}]]
    if {$congestion == {}} {
      set placerCong [::tb::get_metric_values -quiet -ids [::tb::get_metric_ids -ids $id -glob {report.design_analysis.congestion.placer}]]
      set routerCong [::tb::get_metric_values -quiet -ids [::tb::get_metric_ids -ids $id -glob {report.design_analysis.congestion.router}]]
      if {($routerCong != {u-u-u-u}) && ($routerCong != {})} {
        set congestion $routerCong
      } elseif {($placerCong != {u-u-u-u}) && ($placerCong != {})} {
        set congestion $placerCong
      }
    }
    if {$congestion == {}} {
      set congestion {N/A}
    }
    return [list $wns $tns $tnsFailing $whs $ths $thsFailing $overlaps $directive $congestion [duration2seconds $duration] [array get metrics] ]
  }

  set table {classic}
  set files {}
  set sortBy {}
  set saveResults 0
  set showDirective 0
  set showRuntime 0
  set showPostRoute 0
  set showAllHold 0
  set showCongestion 0
  set verbose 0
  set help 0
  set standalone 0
  set error 0
  if {[llength $args] == 0} {
    set help 1
  }
  while {[llength $args]} {
    set name [lshift args]
    switch -exact -- $name {
      -standalone {
      	# The script is run in standalone mode
        set standalone 1
      }
      -db -
      -db {
           set files [concat $files [glob -nocomplain [lshift args]]]
      }
      -show -
      -show_hold -
      -show_all -
      -show_all_hold -
      -hold {
           set showAllHold 1
      }
      -show -
      -show_directive -
      -directive {
           set showDirective 1
      }
      -so -
      -sort -
      -sort_by -
      -sort_by_wns {
           set sortBy {routeWNS}
      }
      -sa -
      -save -
      -save {
           set saveResults 1
      }
      -runtime -
      -runtime -
      -runtime {
           set showRuntime 1
      }
      -cong -
      -congestion -
      -show_congestion {
           set showCongestion 1
      }
      -lean -
      -lean {
           set table {lean}
      }
      -h -
      -help {
           set help 1
      }
      -v -
      -verbose {
           set verbose 1
      }
      default {
            if {[string match "-*" $name]} {
              puts " -E- option '$name' is not a valid option."
              incr error
            } else {
              set files [concat $files [glob -nocomplain $name]]
            }
      }
    }
  }

  if {$help} {
    set msg [format {
  Usage: snapshot_summary
              [-db <filename(s)>]
              [-hold|-show_hold]
              [-directive|-show_directive]
              [-congestion|-show_congestion]
              [-so|-sort_by_wns]
              [-sa|-save]
              [-runtime]
              [-lean]
              [-verbose|-v]
              [-help|-h]

  Description: Extract timing summary metrics from snapshot database

    Use -db to specify a list of files or a file pattern
    Use -show_hold to report hold time for synth_design/opt_design/place_design
    Use -show_directive to report the directive used for all steps
    Use -show_congestion to report the placer/router congestions
    Use -sort_by_wns to sort the results by post-route wns
    Use -save to save CSV + report files
    Use -runtime to show runtime
    Use -lean to use lean versus classic table

  Example:
     snapshot_summary -db metrics.db
     snapshot_summary -db metrics.db -sort_by_wns
     snapshot_summary -db */metrics.db -sort_by_wns -show_hold
     snapshot_summary -db '*/metrics.db' -save -runtime -congestion -lean
  } ]
    # HELP -->
    if {!$standalone} {
    	# Reformat the help message depending on the mode used (standalone/plugin)
    	regsub -all {snapshot_summary} $msg {snapshot summary} msg
    }
    puts $msg
    puts ""
    return -code ok
  }

  if {$files == {}} {
    puts " -E- no snapshot db provided (-db)"
    incr error
  }

  if {$error} {
    puts " -E- some error(s) happened. Cannot continue.\n"
    if {$standalone} {
    	exit 1
    } else {
    	return 1
    }
  }

  set tbl [::tb::prettyTable]
  set header [list]
  set header [concat $header Project Version Release Experiment [list {Total Runtime}] ]
  # Step: synth_design
  set header [concat $header Step Directive WNS TNS # WHS THS # Runtime ]
  # Extra metrics
  # set header [concat $header lut_as_logic lut_as_memory lut_as_distributed_ram lut_as_shift_register lut_as_flip_flop ]
  # Step: opt_design
  set header [concat $header Step Directive WNS TNS # WHS THS # Runtime ]
  # Extra metrics
  # set header [concat $header lut_as_logic lut_as_memory lut_as_distributed_ram lut_as_shift_register lut_as_flip_flop ]
  # Step: place_design
  set header [concat $header Step Directive WNS TNS # WHS THS # {N-S-E-W} Runtime ]
  # # Extra metrics
  # set header [concat $header lut_as_logic lut_as_memory lut_as_distributed_ram lut_as_shift_register lut_as_flip_flop ]
  # Step: phys_opt_design
  set header [concat $header Step Directive Iter WNS TNS # WHS THS # {N-S-E-W} Runtime ]
  # # Extra metrics
  # set header [concat $header lut_as_logic lut_as_memory lut_as_distributed_ram lut_as_shift_register lut_as_flip_flop ]
  # Step: route_design
  set header [concat $header Step Directive WNS TNS # WHS THS # Overlaps {N-S-E-W} Runtime ]
  # # Extra metrics
  # set header [concat $header lut_as_logic lut_as_memory lut_as_distributed_ram lut_as_shift_register lut_as_flip_flop ]
  # Step: phys_opt_design
  set header [concat $header Step Directive WNS TNS # WHS THS # {N-S-E-W} Runtime ]
  # # Extra metrics
  # set header [concat $header lut_as_logic lut_as_memory lut_as_distributed_ram lut_as_shift_register lut_as_flip_flop ]
  $tbl header $header

  set num 0
  set synthCount 0
  set optCount 0
  set placeCount 0
  set physOptCount 0
  set routeCount 0
  set postRoutePhysOptCount 0
  foreach filename $files {
    incr num
    # Open the database in memory (-memory)
    set SQL [::tb::open_snapshot_db -db $filename -memory]
    set dbVersion [$SQL eval { SELECT value FROM param WHERE property='version' LIMIT 1; } ]
    if {$dbVersion < 1.5} {
      puts " -W- snapshot database $dbVersion is not supported. Skipped"
      continue
    }

    set allsnapshotids [::tb::get_snapshot_ids]
    set projects [lsort [::tb::get_projects]]
    set count 0
    foreach project $projects {
      set projectids [::tb::get_snapshot_ids -project $project]
      set versions [lsort [::tb::get_versions -ids $projectids]]
      foreach version $versions {
        set versionids [::tb::get_snapshot_ids -project $project -version $version]
        set releases [lsort [::tb::get_releases -ids $versionids]]
        foreach release $releases {
          set releaseids [::tb::get_snapshot_ids -project $project -version $version -release $release]
          set experiments [lsort [::tb::get_experiments -ids $releaseids]]
          foreach experiment $experiments {
#             puts [format {%s -> %s -> %s -> %s} $project $version $release $experiment]
            if {[llength $files] > 1} {
              if {$verbose} {
                progressBar $count [llength $allsnapshotids] [format { Processing [%s/%s] (%s)} $num [llength $files] [file normalize $filename] ]
              } else {
                progressBar $count [llength $allsnapshotids] [format { Processing [%s/%s] } $num [llength $files]]
              }
            } else {
              progressBar $count [llength $allsnapshotids]
            }

            set totalRuntime 0
            set synthTim [list {} {} {} {} {} {} {} {} {} {}]
            set synthRuntime 0
            set synthDirective [list]
            set synthCongestion {N/A}
            # Extra metrics (optional)
            catch {unset synthMetrics}
            set optTim [list {} {} {} {} {} {} {} {} {} {}]
            set optRuntime 0
            set optDirective [list]
            set optCongestion {N/A}
            # Extra metrics (optional)
            catch {unset optMetrics}
            set placeTim [list {} {} {} {} {} {} {} {} {} {}]
            set placeRuntime 0
            set placeDirective [list]
            set placeCongestion {N/A}
            # Extra metrics (optional)
            catch {unset placeMetrics}
            set physOptTim [list {} {} {} {} {} {} {} {} {} {}]
            set physOptIter 0
            set physOptRuntime 0
            set physOptDirective [list]
            set physOptCongestion {N/A}
            # Extra metrics (optional)
            catch {unset physOptMetrics}
            set routeTim [list {} {} {} {} {} {} {} {} {} {}]
            set routeRuntime 0
            set routeDirective [list]
            set routeCongestion {N/A}
            # Extra metrics (optional)
            catch {unset routeMetrics}
            set postRoutePhysOptTim [list {} {} {} {} {} {} {} {} {} {}]
            set postRoutePhysOptRuntime 0
            set postRoutePhysOptDirective [list]
            set postRoutePhysOptCongestion {N/A}
            # Extra metrics (optional)
            catch {unset postRoutePhysOptMetrics}
            # Default values for extra metrics
#             foreach var {lut_as_logic lut_as_memory lut_as_distributed_ram lut_as_shift_register lut_as_flip_flop} {
#               eval [list set synthMetrics($var) {N/A}]
#               eval [list set optMetrics($var) {N/A}]
#               eval [list set placeMetrics($var) {N/A}]
#               eval [list set physOptMetrics($var) {N/A}]
#               eval [list set routeMetrics($var) {N/A}]
#               eval [list set postRoutePhysOptMetrics($var) {N/A}]
#             }

            foreach step [::tb::get_steps -ids [::tb::get_snapshot_ids -project $project -version $version -release $release -experiment $experiment]] {
              incr count
              switch -regexp -- $step {
                {^.*synth_design.*$} {
                  incr synthCount
                  set timInfo [get_snapshot_info $project $version $release $experiment $step]
                  if {[lsort -unique $timInfo] != [list {}]} {
                    set synthTim [lrange $timInfo 0 9]
                    # Extra metrics
                    array set synthMetrics [lindex $timInfo 10]
                    lappend synthDirective [lindex $timInfo 7]
                    set synthCongestion [lindex $timInfo 8]
                    incr synthRuntime [lindex $timInfo 9]
                  }
                }
                {^.*place_design.*$} {
                  incr placeCount
                  set timInfo [get_snapshot_info $project $version $release $experiment $step]
                  if {[lsort -unique $timInfo] != [list {}]} {
                    set placeTim [lrange $timInfo 0 9]
                    # Extra metrics
                    array set placeMetrics [lindex $timInfo 10]
                    lappend placeDirective [lindex $timInfo 7]
                    set placeCongestion [lindex $timInfo 8]
                    incr placeRuntime [lindex $timInfo 9]
                  }
                }
                {^.*phys_opt_design.*$} {
                  set timInfo [get_snapshot_info $project $version $release $experiment $step]
                  if {[lsort -unique $timInfo] != [list {}]} {
                    if {[lsort -unique $routeTim] == [list {}]} {
                      # Pre-route phys_opt_design
                      incr physOptCount
                      incr physOptIter
                      set physOptTim [lrange $timInfo 0 9]
                      # Extra metrics
                      array set physOptMetrics [lindex $timInfo 10]
                      lappend physOptDirective [lindex $timInfo 7]
                      set physOptCongestion [lindex $timInfo 8]
                      incr physOptRuntime [lindex $timInfo 9]
                    } else {
                      # Post-route phys_opt_design
                      incr postRoutePhysOptCount
                      set showPostRoute 1
                      set postRoutePhysOptTim [lrange $timInfo 0 9]
                      # Extra metrics
                      array set postRoutePhysOptMetrics [lindex $timInfo 10]
                      lappend postRoutePhysOptDirective [lindex $timInfo 7]
                      set postRoutePhysOptCongestion [lindex $timInfo 8]
                      incr postRoutePhysOptRuntime [lindex $timInfo 9]
                    }
                  } else {
                  }
                }
                {^.*opt_design.*$} {
                  # Moved after {^.*phys_opt_design.*$} so that the string matching is done after
                  incr optCount
                  set timInfo [get_snapshot_info $project $version $release $experiment $step]
                  if {[lsort -unique $timInfo] != [list {}]} {
                    set optTim [lrange $timInfo 0 9]
                    # Extra metrics
                    array set optMetrics [lindex $timInfo 10]
                    lappend optDirective [lindex $timInfo 7]
                    set optCongestion [lindex $timInfo 8]
                    incr optRuntime [lindex $timInfo 9]
                  }
                }
                {^.*route_design.*$} {
                  incr routeCount
                  set timInfo [get_snapshot_info $project $version $release $experiment $step]
                  if {[lsort -unique $timInfo] != [list {}]} {
                    set routeTim [lrange $timInfo 0 9]
                    # Extra metrics
                    array set routeMetrics [lindex $timInfo 10]
                    lappend routeDirective [lindex $timInfo 7]
                    set routeCongestion [lindex $timInfo 8]
                    incr routeRuntime [lindex $timInfo 9]
                  }
                }
                default {
                }
              }
            }
            # Only one of the step runtime is not zero
            set totalRuntime [expr $totalRuntime + $synthRuntime + $optRuntime + $placeRuntime + $physOptRuntime + $routeRuntime + $postRoutePhysOptRuntime]
            # Remove last dot(s) from the experiment name $name
            regsub -all {(\.*)$} $name {} name
            # Flatten the lists of directive to cover the case when the variable is a list of a single
            # empty string: [list {}]
            # In this case, since we build a list of $<variable> with '$tbl addrow', we don't want the
            # column to contain: {} instead of an empty string
            set synthDirective [lflatten $synthDirective]
            set optDirective [lflatten $optDirective]
            set placeDirective [lflatten $placeDirective]
            set physOptDirective [lflatten $physOptDirective]
            set routeDirective [lflatten $routeDirective]
            set postRoutePhysOptDirective [lflatten $postRoutePhysOptDirective]
            # Add row to table
            $tbl addrow [concat \
                 [list $project] [list $version] [list $release] \
                 [list $experiment] \
                 [list [::tb::snapshot::duration $totalRuntime]] \
                 synth_design [list $synthDirective] [lrange $synthTim 0 5] [list [::tb::snapshot::duration $synthRuntime]] \
                 opt_design [list $optDirective] [lrange $optTim 0 5] [list [::tb::snapshot::duration $optRuntime]] \
                 place_design [list $placeDirective] [lrange $placeTim 0 5] $placeCongestion [list [::tb::snapshot::duration $placeRuntime]] \
                 phys_opt_design [list $physOptDirective] $physOptIter [lrange $physOptTim 0 5] $physOptCongestion [list [::tb::snapshot::duration $physOptRuntime]] \
                 route_design [list $routeDirective] [lrange $routeTim 0 6] $routeCongestion [list [::tb::snapshot::duration $routeRuntime]] \
                 phys_opt_design [list $postRoutePhysOptDirective] [lrange $postRoutePhysOptTim 0 5] $postRoutePhysOptCongestion [list [::tb::snapshot::duration $postRoutePhysOptRuntime]] \
                 ]

#           # Example of extra metrics for the different flow steps:
#                  [list $synthMetrics(lut_as_logic) $synthMetrics(lut_as_memory) $synthMetrics(lut_as_distributed_ram) $synthMetrics(lut_as_shift_register) $synthMetrics(lut_as_flip_flop)] \
#                  [list $optMetrics(lut_as_logic) $optMetrics(lut_as_memory) $optMetrics(lut_as_distributed_ram) $optMetrics(lut_as_shift_register) $optMetrics(lut_as_flip_flop)] \
#                  [list $placeMetrics(lut_as_logic) $placeMetrics(lut_as_memory) $placeMetrics(lut_as_distributed_ram) $placeMetrics(lut_as_shift_register) $placeMetrics(lut_as_flip_flop)] \
#                  [list $physOptMetrics(lut_as_logic) $physOptMetrics(lut_as_memory) $physOptMetrics(lut_as_distributed_ram) $physOptMetrics(lut_as_shift_register) $physOptMetrics(lut_as_flip_flop)] \
#                  [list $routeMetrics(lut_as_logic) $routeMetrics(lut_as_memory) $routeMetrics(lut_as_distributed_ram) $routeMetrics(lut_as_shift_register) $routeMetrics(lut_as_flip_flop)] \
#                  [list $postRoutePhysOptMetrics(lut_as_logic) $postRoutePhysOptMetrics(lut_as_memory) $postRoutePhysOptMetrics(lut_as_distributed_ram) $postRoutePhysOptMetrics(lut_as_shift_register) $postRoutePhysOptMetrics(lut_as_flip_flop)] \

          #   puts "$experiment / place_design:<$placeTim>"
          #   puts "$experiment / phys_opt_design:$physOptTim"
          #   puts "$experiment / route_design:$routeTim"

          }
        }
      }

    }

    ::tb::close_snapshot_db

  }

  # Clear progress bar
  if {$verbose} {
    puts "\r[string repeat { } 220]"
  } else {
    puts "\r[string repeat { } 100]"
  }

  switch $sortBy {
    routeWNS {
      # Sort the table based on router's WNS (from highest to lowest)
      $tbl sort -real -44
    }
    default {
    }
  }

  set columnsToDisplay [list 0 1 2 3]
  if {$showRuntime} {
    set columnsToDisplay [concat $columnsToDisplay [list 4] ]
  }
  if {$synthCount} {
    # synth_design info
    set columnsToDisplay [concat $columnsToDisplay [list 5 7 8 9] ]
    if {$showDirective} {
      set columnsToDisplay [concat $columnsToDisplay [list 6] ]
    }
    if {$showRuntime} {
      set columnsToDisplay [concat $columnsToDisplay [list 13] ]
    }
    if {$showAllHold} {
      # Show WHS/THS/# for syn_design
      set columnsToDisplay [concat $columnsToDisplay [list 10 11 12] ]
    }
  }
  if {$optCount} {
    # opt_design info
    set columnsToDisplay [concat $columnsToDisplay [list 14 16 17 18] ]
    if {$showDirective} {
      set columnsToDisplay [concat $columnsToDisplay [list 15] ]
    }
    if {$showRuntime} {
      set columnsToDisplay [concat $columnsToDisplay [list 22] ]
    }
    if {$showAllHold} {
      # Show WHS/THS/# for opt_design
      set columnsToDisplay [concat $columnsToDisplay [list 19 20 21] ]
    }
  }
  if {$placeCount} {
    # place_design info
    set columnsToDisplay [concat $columnsToDisplay [list 23 25 26 27] ]
    if {$showDirective} {
      set columnsToDisplay [concat $columnsToDisplay [list 24] ]
    }
    if {$showRuntime} {
      set columnsToDisplay [concat $columnsToDisplay [list 32] ]
    }
    if {$showAllHold} {
      # Show WHS/THS/# for place_design
      set columnsToDisplay [concat $columnsToDisplay [list 28 29 30] ]
    }
    if {$showCongestion} {
      set columnsToDisplay [concat $columnsToDisplay [list 31] ]
    }
  }
  if {$physOptCount} {
    # phys_opt_design info
    set columnsToDisplay [concat $columnsToDisplay [list 33 35 36 37 38 39 40 41] ]
    if {$showDirective} {
      set columnsToDisplay [concat $columnsToDisplay [list 34] ]
    }
    if {$showRuntime} {
      set columnsToDisplay [concat $columnsToDisplay [list 43] ]
    }
    if {$showCongestion} {
      set columnsToDisplay [concat $columnsToDisplay [list 42] ]
    }
  }
  if {$routeCount} {
    # route_design info
    set columnsToDisplay [concat $columnsToDisplay [list 44 46 47 48 49 50 51 52] ]
    if {$showDirective} {
      set columnsToDisplay [concat $columnsToDisplay [list 45] ]
    }
    if {$showRuntime} {
      set columnsToDisplay [concat $columnsToDisplay [list 54] ]
    }
    if {$showCongestion} {
      set columnsToDisplay [concat $columnsToDisplay [list 53] ]
    }
  }
  if {$postRoutePhysOptCount} {
    if {$showPostRoute == 1} {
      # phys_opt_design info
      set columnsToDisplay [concat $columnsToDisplay [list 55 57 58 59 60 61 62] ]
      if {$showDirective} {
        set columnsToDisplay [concat $columnsToDisplay [list 56] ]
      }
      if {$showRuntime} {
        set columnsToDisplay [concat $columnsToDisplay [list 64] ]
      }
      if {$showCongestion} {
        set columnsToDisplay [concat $columnsToDisplay [list 63] ]
      }
    }
  }

  # If some extra metrics have been added, then display all the columns. That's easier than figuring out
  # how the column numbers (runtime, ...) have been affected
  # set columnsToDisplay [iota 0 [llength $header]]

  $tbl configure -display_columns $columnsToDisplay

  # Print summary table
  puts [$tbl print -format $table]

  if {$saveResults} {
    if {[llength $files] == 1} {
      # Only 1 snapshot database has been specified
      set prefix [file normalize [file rootname $files]]
    } else {
      # Multiple snapshot databases have been specified
      # In this case, the results are saved in current working directory
      set prefix [file join [file normalize [pwd]] metrics]
    }
    $tbl export -format csv -file ${prefix}.csv
    $tbl print -file ${prefix}.rpt -format $table
    puts " File ${prefix}.csv has been generated"
    puts " File ${prefix}.rpt has been generated"
  }

  catch {$tbl destroy}
  return -code ok
}

##-----------------------------------------------------------------------
## Main
##-----------------------------------------------------------------------

if {[file tail [info script]]!=[file tail $argv0]} {
  # This file is sourced to be used as a plugin of the command 'snapshot'
  # Nothing to be done beside loading the prettyTable package
  if {[catch {package present prettyTable}]} { package require prettyTable }
} else {
  # This file is executed to be used as standalone
  if {[catch {package present toolbox}]} { package require toolbox }
  if {[catch {eval [concat ::tb::snapshot::summary -standalone $argv]} errorstring]} {
    puts $errorstring
    exit 1
  }
  exit 0
}
